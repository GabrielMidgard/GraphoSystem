<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				width="958" height="512" showCloseButton="true" title="Mail Butler" layout="absolute">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import mx.random.constants.Catalogs;
		import mx.random.constants.Languages;
		import mx.random.constants.SystemGlobals;
		import mx.random.converters.Converter;
		import mx.random.dataManagers.DataManager;
		import mx.random.dataManagers.EventManager;
		import mx.random.forms.Validator;
		import mx.random.web.WebApplication;
		import mx.random.windowManagers.PopManager;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.remoting.RemoteObject;
		
		private var _webApplication:WebApplication;
		private var Valid:Validator 						= new Validator();
		private var _workManager:Object 					= new Object();
		private var _MainService:RemoteObject 				= new RemoteObject();
		[Bindable]	private var _Data:DataManager 			= new DataManager(this);
		[Bindable]	private var _DataResult:ArrayCollection = new ArrayCollection();			
		private var _eventManager:EventManager 				= new EventManager(this);
		private var _dataIndex:Number 						= 0;
		
		//-----------Event Manager -----------
		
		[Bindable]	public var _dataReady:Boolean 			= false;
		[Bindable]	public var _newData:Boolean 			= false;
		[Bindable]	public var _updateData:Boolean 			= false;
		
		//-----------Event Manager -----------
		
		
		//-----------Local Vars -----------
		
		private var _selectedId:Number 			= 0;
		private var _selectedName:String 		= "";
		private var _serviceName  				= "MailButler";
		private var _mainId  					= "_idMail";
		private var _mainFocusField:String      = "";
		
		
		//-----------Local Vars -----------
		
		//---------------------------- Context ---------------------------------------------            
		
		public function set context(contextObj:Object):void{
			for( var p:String in contextObj){
				if(this.hasOwnProperty(p)){
					this[p] = contextObj[p];
				}
			}
			initView();
		}
		
		public function set workManager(value:Object):void{
			_workManager = value;
		}
		
		public function set webApplication(value:WebApplication):void{
			_webApplication = value;
		}
			
		public function get webApplication():WebApplication{ return _webApplication; } 
		
		//---------------------------- Context ---------------------------------------------  
		
		//-------------------------------- MainInit --------------------------------------

		private function get viewContext():Object{
			return {
				webApplication: _webApplication,
				workManager: this
			}					
		}
		
		private function addValidations():void{
			Valid.changeLanguage(Languages.SPANISH);
			Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			Valid.validateOnChange = true;
			//----------- Validaciones ---------------------------
			//Valid.addStringVal(_nombre,2,100,"Nombre");
			//----------- Validaciones ---------------------------	
		}
		
		private function extraCreateData(params:Object):Object{
			//params["_newsImage"] = _image;
			return params;
		}
		
		private function createRecordExtras():void{
			//_image = "defaultNew.jpg";
		}
		
		private function extraUpdateData(params:Object):Object{	
			//params['_color'] = areaColor.selectedColor;			
			return params;
		}
		
		private function loadExtraFields(params:Object):void{
			//_image = params["_newsImage"];
		}
		
		
		
		public function initView():void{
			forceImports();
			_Data.exceptions = ["_idMail"];
			_MainService = _webApplication.getService(_serviceName);
			_MainService.addEventListener(FaultEvent.FAULT,onFault);
			getMail();
			addValidations();
			//_searchType.selectedIndex = 1;
		}
			
		private function forceImports():void{
			
		}
			
		public function closeWindow():void{
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			PopUpManager.removePopUp(this);
		}
				
		private function initData():void{
			_MainService.getFields();
			_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
			_dataReady = false;
		}
		
		
		
		//-------------------------------- End MainInit --------------------------------------
		
			private function getMail():void{
				_MainService.getMail();
				_MainService.getMail.addEventListener(ResultEvent.RESULT,onGetMailResult);
			}
				
			private function onGetMailResult(e:ResultEvent):void{
				_MainService.getMail.removeEventListener(ResultEvent.RESULT,onGetMailResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay registros en la base de datos","Atención")
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					//_Data.loadData(_DataResult[_dataIndex]);
					_dataList.selectedIndex = _dataIndex;
					//_dataList.scrollToIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
				}
				_dataReady = true;
				resetBooleans();
			}	
			
			
		private function newData():void{
			_Data.clear();
			_newData = true;
			_updateData = false;
			Valid.validateAll();
			this[_mainFocusField].setFocus();
			createRecordExtras();
		}
		
		private function createData():void{
			if(Valid.validateAll()){
				_dataReady = false;
				var params:Object = extraCreateData(_Data.makeData());
				_MainService.createRecord(params);
				_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
			}else{
				Alert.show(Valid.errors,"Error");
			}
		}
		
		private function updateData():void{
			if(Valid.validateAll()){
				_dataReady = false;
				var params:Object = extraUpdateData(_Data.makeData());
				params[_mainId] = _dataList.selectedItem[_mainId];
				_MainService.updateRecord(params);
				_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
				_dataIndex =_dataList.selectedIndex;
			}else{
				Alert.show(Valid.errors,"Error");
			}
		}
		
		private function deleteDataAlert():void{
			if(_dataList.selectedIndex!=-1){
				Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
			}else{
				Alert.show("No hay registro selecionado","Error");
			}
		}
		
		private function deleteData(e:CloseEvent):void{
			if(e.detail==Alert.YES){
				var params:Object = new Object();
				params[_mainId] = _dataList.selectedItem[_mainId];
				_MainService.deleteRecord(params);
				_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataReady = false;
			}
		}
		
		private function cancel():void{
			onDataSelect();
			resetBooleans();
			Valid.validateAll();
		}
		
		private function resetBooleans():void{
			_newData = false;
			_updateData = false;
		}
		
		private function dataChange():void{
			_updateData = true;
		}
		
		
		//-------------------------------- ResultsEvents --------------------------------------		
		
		private function onGetFieldsResult(e:ResultEvent):void{
			_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
			if(e.result) {
				_Data.createFields(Converter.arrayConverter(e.result));
				//getData();
			}else{
				Alert.show("Error al cargar los datos","Error");
				_dataReady = false;
			}
			_DataResult= new ArrayCollection();
			_dataList.visible = true;
		}
		
		
		
		
		
		private function onFault(e:FaultEvent):void{
			Alert.show(e.fault.faultString,"Error");
		}
		
		private function onDataSelect():void{
			if(_dataList.selectedIndex!=-1) {
				_Data.loadData(_dataList.selectedItem);
				_dataIndex =_dataList.selectedIndex;
				loadExtraFields(_dataList.selectedItem);
				_selectedId = _dataList.selectedItem[_mainId];
			}
		}
		
		private function onCreateComplete(e:ResultEvent):void{				
			_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
			_dataIndex = _DataResult.length;
			Catalogs.reload();
			//getData();
		}
		
		private function onUpdateComplete(e:ResultEvent):void{
			_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
			Catalogs.reload();
			//getData();
		}
		
		private function onDeleteComplete(e:ResultEvent):void{
			_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
			_dataIndex = _DataResult.length-2;
			Catalogs.reload();
			//getData();
		}
		
		//-------------------------------- ResultsEvents --------------------------------------	
		
		//-------------------------------- POP UP WINDOW --------------------------------------	
		public function openPopUp(popUpName:String,modal:Boolean = true):void{
			var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
			pop.name = popUpName;
			pop.addEventListener(CloseEvent.CLOSE, closePopup);
			if(pop.hasOwnProperty("context")){
				Object(pop).context = viewContext;
			}
			PopUpManager.centerPopUp(pop);
		}
		
		private function closePopup(e:CloseEvent):void{
			PopUpManager.removePopUp(e.target as TitleWindow);
		}
		
		private function openCompanias():void{
			openPopUp("empresa.Catalogo_Companias");
		}
		
		//-------------------------------- POP UP WINDOW --------------------------------------
		
		//-------------------------------- Search Engine --------------------------------------
		
	    /*
		private function searchFilter():void{
			_DataResult.filterFunction = vlidateSearch;
			_DataResult.refresh();
		}
		
		private function vlidateSearch(item:Object):Boolean{
			var isMatch:Boolean = false;           
			if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
				isMatch = true
			}              
			return isMatch;              
		}
		
		private function search():void{
			_searchFilter = _searchField.text;
			searchFilter();
		}
		
			
			private var _searchFilter:String 			= new String();
[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Id",     	value:"_idArea"},{label:"Nombre",     	value:"_nombre"}]);
		*/
		//-------------------------------- Search Engine --------------------------------------					
		
		]]>
	</fx:Script>
	<s:Button visible="{!_newData&amp;&amp;!_updateData}" left="10" bottom="10" width="80"
			   label="Nuevo" click="newData();" enabled="{_dataReady}"/>
	<s:Button visible="{_newData||_updateData}" left="100" bottom="10" width="80" label="Cancelar"
			   click="cancel();" enabled="{_dataReady}"/>
	<s:Button visible="{_newData}" left="10" bottom="10" width="80" label="Aceptar"
			   click="createData();" enabled="{_dataReady}"/>
	<s:Button visible="{!_newData&amp;&amp;!_updateData}" left="100" bottom="10" width="80"
			   label="Eliminar" click="deleteDataAlert();" enabled="{_dataReady&amp;&amp;!_newData}"/>
	<s:Button visible="{_updateData&amp;&amp;!_newData}" left="10" bottom="10" width="80"
			   label="Actualizar" click="updateData();"
			   enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}"/>
	<s:Button right="10" bottom="10" width="145" label="Regresar" click="closeWindow();"
			   enabled="{!_newData}"/>
	<s:List id="_dataList" 
			x="10" y="34" 
			width="261" height="407" 
			dataProvider="{_DataResult}" 
			itemRenderer="renderers.MailListItemRenderer">
			
		<s:layout>
			<s:VerticalLayout horizontalAlign="justify" gap="0" requestedRowCount="6" />
		</s:layout>
		
	</s:List>
	
	
	
	
	
	
	
</mx:TitleWindow>
