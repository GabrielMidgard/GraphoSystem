<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="482" height="348"  
	horizontalCenter="0" 
	title="Administración de Comisiones" 
	>

	<s:DataGrid height="211" dataProvider="{_DataResult}" id="_dataList" selectionChange="onDataSelect();" selectionMode="singleRow" enabled="{_dataReady&amp;&amp;!_newData}" width="457" x="10" y="70">
		<s:columns>	
			<s:ArrayList>
				<s:GridColumn headerText="Id" dataField="_idComision" width="40"></s:GridColumn>	
				<!--El siguiente GridColumn tenía como atributo: 'textAlign="rigth"', lo he quitado por que en sparck no aparece el atributo.-->
				<s:GridColumn headerText="Mínimo" dataField="_condicion_min" labelFunction="Converter.columNumberConverter" ></s:GridColumn>
				<s:GridColumn headerText="Máximo" dataField="_condicion_max" labelFunction="Converter.columNumberConverter" ></s:GridColumn>
				<s:GridColumn headerText="PRC" dataField="_porcentaje" width="70" ></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Button label="Nuevo" width="80" enabled="{_dataReady}" visible="{!_newData&amp;&amp;!_updateData}" click="newData();" x="10" y="289"/>
	<s:Button label="Cancelar" width="80" enabled="{_dataReady}" visible="{_newData||_updateData}" click="cancel();" x="98" y="289"/>
	<s:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="{_newData}" click="createData();" x="10" y="289"/>
	<s:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData}" visible="{!_newData&amp;&amp;!_updateData}" click="deleteDataAlert();" x="98" y="289"/>
	<s:Button label="Actualizar" width="80" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}" visible="{_updateData&amp;&amp;!_newData}" click="updateData();" x="10" y="289"/>
	<s:Button label="Regresar" click="closeWindow();" width="145"  enabled="{!_newData}" x="322" y="286"/>
	<s:ComboBox 	x="72" id="_searchType" 	dataProvider="{SystemGlobals.TIPOS_COMISIONES}" labelField="_nombre" width="256" y="10" tabIndex="2" enabled="{!_newData&amp;&amp;!_updateData}" change="getData();"/>
	<s:Label x="26" text="Tipo :" textAlign="right" y="12"/>
	<s:TextInput x="72" y="40" id="_condicion_min" width="91" change="dataChange();" restrict="0-9 /."/>
	<s:TextInput x="237" y="40" id="_condicion_max" width="91" change="dataChange();" restrict="0-9 /."/>
	<s:TextInput x="421" y="42" id="_porcentaje" width="46" change="dataChange();" restrict="0-9 /." maxChars="5"/>
	<s:Label x="10" y="42" text="Mínimo :"/>
	<s:Label x="171" y="42" text="Máximo :"/>
	<s:Label x="341" y="44" text="Porcentaje :"/>
	<s:Button x="336" y="9" icon="@Embed(source='../../assets/Icons/Buttons/Edit.png')" click="openTipos()" enabled="{!_newData&amp;&amp;!_updateData}"/>
	
	<fx:Script>
		<![CDATA[
			
			
			import mx.random.constants.SystemGlobals;
			import mx.random.constants.Catalogs;			
			import mx.random.windowManagers.PopManager;
			import mx.random.constants.Languages;
			import mx.random.forms.Validator;
			import mx.random.dataManagers.EventManager;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.web.WebApplication;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import mx.rpc.remoting.RemoteObject;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 	= new RemoteObject();
			[Bindable]	private var _Data:DataManager 			= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection = new ArrayCollection();			
			private var _eventManager:EventManager 	= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;
			[Bindable]	public var _metasSemanales:ArrayCollection = new ArrayCollection();
			
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number = 0;
			private var _selectedName:String = "";
			private var _serviceName  		= "Comisiones";
			private var _mainId  			= "_idComision";
			private var _mainFocusField:String      = "_condicion_max";
			
			
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}initView();
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				
			}
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
				//----------- Validaciones ---------------------------				
				Valid.addNumberVal(_condicion_min,true,true,2,true,"Rango Mínimo");
				Valid.addNumberVal(_condicion_max,true,true,2,true,"Rango Máximo");
				Valid.addNumberVal(_porcentaje,true,true,2,true,"Procentaje de Comisión");
				//----------- Validaciones ---------------------------
				Valid.validateOnChange = true;
				
			}
			
			private function onFocusOut(e:Event):void{
				if(_newData||_updateData) Valid.validateAll();//Valid.validateOne(e.currentTarget.name);
			}
			
			private function extraCreateData(params:Object):Object{				
				params["_idTipoComision"] = _searchType.selectedItem._idTipoComision;
				return params;
			}
			
			private function createRecordExtras():void{
				//_image = "defaultNew.jpg";
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_color'] = areaColor.selectedColor;			
				return params;
			}
			
			private function loadExtraFields(params:Object):void{				
				//_image = params["_newsImage"];
			}
			
			private function forceImports():void{
				
			}
			
			public function initView():void{
				forceImports();
				_MainService = _webApplication.getService(_serviceName);				
				_Data.exceptions = ["_idComision","_idTipoComision"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);				
				initData();
				addValidations();
				loadScroll();				
				//_searchType.selectedIndex = 1;
			}
			
			public function imageUploadReady(data:Object):void{
				
			}
			
			// ------------------- View Extra Data -------------------------------
			
			private function loadScroll():void{
				_dataList.visible = false;
				for(var n:Number = 0;n<100;n++){
					_DataResult.addItem({i:0});
				}
			}
			
			private function initData():void{
				_MainService.getFields();
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;
				Valid.validateAll();
				this[_mainFocusField].setFocus();
				createRecordExtras();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
				
				private function updateData():void{
					if(Valid.validateAll()){
						_dataReady = false;
						var params:Object = extraUpdateData(_Data.makeData());
						params[_mainId] = _dataList.selectedItem[_mainId];
						_MainService.updateRecord(params);
						_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
						_dataIndex =_dataList.selectedIndex;
					}else{
						Alert.show(Valid.errors,"Error");
					}
					
					
					private function deleteDataAlert():void{
						if(_dataList.selectedIndex!=-1){
							Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
						}else{
							Alert.show("No hay registro selecionado","Error");
						}
						
						private function deleteData(e:CloseEvent):void{
							if(e.detail==Alert.YES){
								var params:Object = new Object();
								params[_mainId] = _dataList.selectedItem[_mainId];
								_MainService.deleteRecord(params);
								_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
								_dataReady = false;
							}
							
							private function cancel():void{
								onDataSelect();
								resetBooleans();
								Valid.validateAll();
							}
							
							private function resetBooleans():void{
								_newData = false;
								_updateData = false;
							}
							
							private function dataChange():void{
								_updateData = true;
							}
							
							private function openImageEditor():void{
								if(_dataList.selectedIndex!=-1){
									//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
									openPopUp("managers.ImageManager")
								}else{
									Alert.show("No hay registro selecionado","Error");
								}
								
								private function openTipos():void{				
									openPopUp("empresa.Empresa_Tipos_Comisiones")
								}
								//-------------------------------- ResultsEvents --------------------------------------		
								
								private function onGetFieldsResult(e:ResultEvent):void{
									_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
									if(e){
										if(e.result) {
											_Data.createFields(Converter.arrayConverter(e.result));
											getData();
										}
									}else{
										Alert.show("Error al cargar los datos","Error");
										_dataReady = false;
									}
									_DataResult= new ArrayCollection();
									_dataList.visible = true;
								}
								
								private function getData():void{
									_MainService.getRecords(_searchType.selectedItem._idTipoComision);
									_MainService.getRecords.addEventListener(ResultEvent.RESULT,onGetDataResult);
									_dataIndex = 0;
								}
								
								private function onGetDataResult(e:ResultEvent):void{
									_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
									_DataResult = Converter.arrayConverter(e.result);
									if(_DataResult.length==0) {
										Alert.show("No hay registros en la base de datos","Atención")
									}else{
										if(_dataIndex<0)
											_dataIndex = 0;
										_Data.loadData(_DataResult[_dataIndex]);
										_dataList.selectedIndex = _dataIndex;
										_dataList.selectedIndex = _dataIndex;
										//De la función: _dataList.scrollToIndex(_dataList.selectedIndex);
										//La sustituí por: _dataList.setSelectedIndex(_dataList.selectedIndex);
										//En la siguiente línea de comandos.
										_dataList.setSelectedIndex(_dataList.selectedIndex);
										//_dataList.scrollToIndex(_dataList.selectedIndex);
										loadExtraFields(_DataResult[_dataIndex]);
									}
									_dataReady = true;
									resetBooleans();
								}
								
								
								private function onFault(e:FaultEvent):void{
									Alert.show(e.fault.faultString,"Error");
								}
								
								private function onDataSelect():void{
									if(_dataList.selectedIndex!=-1) {
										_Data.loadData(_dataList.selectedItem);
										_dataIndex =_dataList.selectedIndex;
										loadExtraFields(_dataList.selectedItem);
										_selectedId = _dataList.selectedItem[_mainId];
									}
									
									private function onCreateComplete(e:ResultEvent):void{				
										_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
										_dataIndex = _DataResult.length;
										Catalogs.reload();
										getData();
									}
									
									private function onUpdateComplete(e:ResultEvent):void{
										_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
										Catalogs.reload();
										getData();
									}
									
									private function onDeleteComplete(e:ResultEvent):void{
										_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
										_dataIndex = _DataResult.length-2;
										Catalogs.reload();
										getData();
									}
									
									//-------------------------------- ResultsEvents --------------------------------------	
									
									//-------------------------------- POP UP WINDOW --------------------------------------	
									public function openPopUp(popUpName:String,modal:Boolean = true):void{
										var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
										pop.name = popUpName;
										pop.addEventListener(CloseEvent.CLOSE, closePopup);
										if(pop.hasOwnProperty("context")){
											Object(pop).context = viewContext;
										}else{
											PopUpManager.centerPopUp(pop);
										}
										
										private function closePopup(e:CloseEvent):void{
											PopUpManager.removePopUp(e.target as TitleWindow);
										}
										//-------------------------------- POP UP WINDOW --------------------------------------
										
										//-------------------------------- Search Engine --------------------------------------
										/*		
										private function searchFilter():void{
										_DataResult.filterFunction = vlidateSearch;
										_DataResult.refresh();
										}
										
										private function vlidateSearch(item:Object):Boolean{
										var isMatch:Boolean = false;           
										if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
										isMatch = true
										}              
										return isMatch;              
										}
										
										private function search():void{
										_searchFilter = _searchField.text;
										searchFilter();
										}
										private var _searchFilter:String 			= new String();
										[Bindable]	private var _searchTypes:ArrayCollection 	= SystemGlobals.TIPOS_COMISIONES;
										*/
										
										//-------------------------------- Search Engine --------------------------------------	
			
			
		]]>
	</fx:Script>
	
	
</s:TitleWindow>
