<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="580" height="602"  
	horizontalCenter="0" 
	title="Administración de Puestos"
	>


	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.random.constants.Catalogs;
			import mx.random.constants.Languages;
			import mx.random.constants.SystemGlobals;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.dataManagers.EventManager;
			import mx.random.events.SelectionEvent;
			import mx.random.events.StaticEvent;
			import mx.random.forms.Validator;
			import mx.random.web.WebApplication;
			import mx.random.windowManagers.PopManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;

			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
[Bindable]	private var _Data:DataManager 				= new DataManager(this);
[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------

[Bindable]	public var _dataReady:Boolean 			= false;
[Bindable]	public var _newData:Boolean 			= false;
[Bindable]	public var _updateData:Boolean 			= false;
[Bindable]	public var _selectMode:Boolean 			= false;
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number = 0;
			private var _selectedName:String = "";
			private var _serviceName  		= "Puestos";
			private var _mainId  			= "_idPuesto";
			private var _mainFocusField:String      = "_nombre";
[Bindable]	private var _deptos:ArrayCollection;
[Bindable]	private var _areas:ArrayCollection;
			private var _selectionMode:Boolean = false;
			private var _idPuestoSuperior:Number =0 ;
			private var _puestoSeleccionado:Number = 0;
			private var _completeData:ArrayCollection = new ArrayCollection();
			//-----------Local Vars -----------
			
//---------------------------- Context ---------------------------------------------            

   			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
				initView();
			}
			
			public function set dataObject(value:Object):void{
				_puestoSeleccionado = Number(value._idPuesto);
			}

			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set selectionMode(value:Boolean):void{
				_selectionMode = value;
				_backBT.label = "Seleccionar";
			}

			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				
			}
			public function get webApplication():WebApplication{ return _webApplication; } 
						
//---------------------------- Context ---------------------------------------------  

//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				
				return {selectionMode:	_selectMode,
						webApplication: _webApplication,
						dataObject: _dataList.selectedItem,
						workManager: this
						}					
			}

			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				
				//----------- Validaciones ---------------------------
				
				Valid.addStringVal(_nombre,3,100,"Nombre");
				
				//----------- Validaciones ---------------------------
				Valid.validateOnChange = true;
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}

		
			
			private function extraCreateData(params:Object):Object{
				params["_idPuestoSuperior"] = _idPuestoSuperior;				
				return params;
			}
			
			private function createRecordExtras():void{
				
			}
			
			private function extraUpdateData(params:Object):Object{	
							
				return params;
			}
			
			private function loadExtraFields(params:Object):void{
				_deptos.filterFunction=deptosFilter;
				_deptos.refresh();
				_idDepartamento.selectedIndex = findIndex(_dataList.selectedItem._idDepartamento);
			}
			
			private function findIndex(value:Number):Number{
				var res:Number = -1;
				for(var n:Number = 0;n<_deptos.length;n++){
					if(_deptos[n]._idDepartamento==value) res = n;
				}
				return res;
			}
			
		
			
			private function findIndexPuesto(value:Number):Number{
				var res:Number = -1;
				for(var n:Number = 0;n<_completeData.length;n++){
					if(_completeData[n]._idPuesto==value) res = n;
				}
				return res;
			}
			
			private function forceImports():void{
				Empresa_Cecos;
				Empresa_Categorias;
				Empresa_Areas;
				Empresa_Departamentos;
				Empresa_Companias;
				Empresa_Ubicaciones;
			}
			
			public function initView():void{	
				_areas = SystemGlobals.AREAS;
				_deptos = SystemGlobals.DEPARTAMENTOS;		
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = ["_idPuesto","_idPuestoSuperior"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				loadScroll();
				_searchType.selectedIndex = 1;
			}
			
			public function imageUploadReady(data:Object):void{
				
			}

			// ------------------- View Extra Data -------------------------------

			private function loadScroll():void{
				_dataList.visible = false;
				for(var n:Number = 0;n<100;n++){
					_DataResult.addItem({i:0});
				}
			}

			private function initData():void{
				_MainService.getFields();
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				if(_selectionMode&&_dataList.selectedIndex!=-1) StaticEvent.dispatchEvent(new SelectionEvent(SelectionEvent.SELECTION_COMPLETE,_dataList.selectedItem));
            		dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
            		PopUpManager.removePopUp(this);
            }
            
//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;
				Valid.validateAll();
				this[_mainFocusField].setFocus();
				createRecordExtras();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}

			private function updateData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
					_dataIndex =_dataList.selectedIndex;
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.deleteRecord(params);
					_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();
				Valid.validateAll();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}

			private function dataChange():void{				
				_updateData = true;
			}

			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			
//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
				_dataList.visible = true;
				
			}
			
			private function getData():void{
				_MainService.getRecords();
				_MainService.getRecords.addEventListener(ResultEvent.RESULT,onGetDataResult);
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				_DataResult = Converter.arrayConverter(e.result);
				_completeData = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay registros en la base de datos","Atención")
				}else{
					if(_selectionMode){
						_dataIndex = findPuestoIndex(_completeData);
					}
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);					
					
					_dataList.selectedIndex = _dataIndex;
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
				}
				_dataReady = true;
				resetBooleans();
			}
			
			
			private function findPuestoIndex(puestos:ArrayCollection):Number{
				for(var n:Number = 0;n<puestos.length;n++){
					if(puestos[n]._idPuesto==_puestoSeleccionado){
						break;
					}
				}
				return n;
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}

			private function onDataSelect():void{
				if(_dataList.selectedIndex!=-1) {					
					_Data.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem[_mainId];
				}
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				getData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				getData();
			}
			
//-------------------------------- ResultsEvents --------------------------------------	

//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean = true):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{
	            PopUpManager.removePopUp(e.target as TitleWindow);
			}
//-------------------------------- POP UP WINDOW --------------------------------------

//-------------------------------- Search Engine --------------------------------------

			private function searchFilter():void{
               			_DataResult.filterFunction = vlidateSearch;
               			_DataResult.refresh();
           		}
          
	       		private function vlidateSearch(item:Object):Boolean{
	           		var isMatch:Boolean = false;           
	           		if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
	               			isMatch = true
	           		}              
	           		return isMatch;              
	       		}
	       	
	       		private function search():void{
				_searchFilter = _searchField.text;
				searchFilter();
			}
			private var _searchFilter:String 			= new String();
[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Id",     	value:"_idPuesto"},{label:"Puesto",     	value:"_nombre"}]);

			private function  selectPuesto():void{
				StaticEvent.addEventListener(SelectionEvent.SELECTION_COMPLETE,onPuestoSelect);
				_selectMode = true;
				openPopUp("Empresa_Puestos");				
			}
			
			private function onPuestoSelect(e:SelectionEvent):void{
				StaticEvent.removeEventListener(SelectionEvent.SELECTION_COMPLETE,onPuestoSelect);
				_idPuestoSuperior = e.itemData['_idPuesto'];				
				dataChange();
			}
//-------------------------------- Search Engine --------------------------------------					
			
			private function openDepto():void{
				openPopUp("Empresa_Departamentos");
			}
						
			private function openArea():void{
				openPopUp("Empresa_Areas");
			}
			
			private function openCECO():void{
				openPopUp("Empresa_CECOS");
			}
			
			private function openCompanias():void{
				openPopUp("Empresa_Companias");
			}
			
			private function openCategorias():void{
				openPopUp("Empresa_Categorias");
			}
			
			
			private function companiaChange():void{
				_areas.filterFunction=areaFilter;
				_areas.refresh();
				_idArea.selectedIndex = 0;
				areaChange()
			}      
			  
		   	public function areaFilter(item:Object):Boolean{
			  	var result:Boolean=false;    
			  	if (!item._idCompania.length|| item._idCompania==_idCompania.selectedItem._idCompania) result=true;      
			  	return result;
		   	}
			
			private function areaChange():void{
				_deptos.filterFunction=deptosFilter;
				_deptos.refresh();
				_idDepartamento.selectedIndex = 0;
			}      
			  
		   	public function deptosFilter(item:Object):Boolean{
			  	var result:Boolean=false;    
			  	if (!item._idArea.length|| item._idArea==_idArea.selectedItem._idArea) result=true;      
			  	return result;
		   	}
//----
			private function functionArea(item:Object,dg:GridColumn):String{
				var index:Number = findComboIndex(item[dg.dataField],dg.dataField,SystemGlobals.AREAS);
				var res:String = "";
				if(index!=-1) res = SystemGlobals.AREAS[index]._nombre;
				return res;
			}
			
			
		// ------------------ Cambiar a Converter.FindIndex Funvtionv
			private function functionDepto(item:Object,dg:GridColumn):String{
				var index:Number = findComboIndex(item[dg.dataField],dg.dataField,SystemGlobals.DEPARTAMENTOS);
				var res:String = "";// ------------------ Cambiar a Converter.FindIndex Funvtion
				if(index!=-1) res = SystemGlobals.DEPARTAMENTOS[index]._nombre;
				return res;
			}
		// ------------------ Cambiar a Converter.FindIndex Funvtion
		
		
			private function findComboIndex(value:Number,prop:String,catalog:Object):Number{
				var res:Number = -1;
				for(var n:Number = 0;n<catalog.length;n++){
				if(catalog[n][prop]== value ) res = n;
			}
				return res;
		}
			
			
			
		]]>
	</fx:Script>
<s:Label x="29" y="15" text="Nombre del Puesto :" />
<s:TextInput id="_nombre" x="150" y="10" width="416" change="dataChange();" enabled="false"
			 tabIndex="1"/>

	<s:DataGrid height="242" dataProvider="{_DataResult}" id="_dataList" selectionChange="onDataSelect();" enabled="{_dataReady&amp;&amp;!_newData}" width="556" x="10" y="272" tabIndex="7">
		<s:columns>	
			<s:ArrayList>						
				<s:GridColumn headerText="Id" dataField="_idPuesto" width="40"/>
				<s:GridColumn headerText="Puesto" dataField="_nombre" width="280"/>
				<s:GridColumn headerText="depto" dataField="_idDepartamento" labelFunction="functionDepto"/>
				<s:GridColumn headerText="Área" dataField="_idArea" labelFunction="functionArea" width="65"/>
			</s:ArrayList>				
		</s:columns>
	</s:DataGrid>
	<s:Button label="Regresar" click="closeWindow();" width="164"  enabled="{!_newData}" x="402" y="523" id="_backBT"/>

	<s:ComboBox 	x="88" id="_searchType" 	dataProvider="{_searchTypes}" 	width="152" y="232" tabIndex="5"/>
	<s:TextInput 	x="248" id="_searchField" 	change="search();" 		width="318" enabled="{!_newData}" y="232" tabIndex="6"/>
	<s:Label x="18" text="Filtrar por :" textAlign="right" y="238"/>
	
	<s:Label x="106" y="103" text="Area :" />
	<s:ComboBox id="_idArea" x="150" y="98" width="416" change="dataChange();areaChange();"
				dataProvider="{_areas}" enabled="false" labelField="_nombre" tabIndex="2"/>
	<s:Label x="56" y="132" text="Departamento :" />
	<s:ComboBox id="_idDepartamento" x="150" y="127" width="416" change="dataChange();"
				dataProvider="{_deptos}" enabled="false" labelField="_nombre" tabIndex="3"/>
	<s:Label x="97" y="161" text="CECO :" />
	<s:ComboBox id="_idCECO" x="150" y="156" width="416" change="dataChange();"
				dataProvider="{SystemGlobals.CECO}" enabled="false" labelField="_nombre"
				tabIndex="3"/>
	<s:Label x="79" y="192" text="Categoría :" />
	<s:ComboBox id="_idCategoria" x="150" y="187" width="416" change="dataChange();"
				dataProvider="{SystemGlobals.CATEGORIAS}" enabled="false" labelField="_nombre"
				tabIndex="3"/>
	<s:Label x="76" y="73" text="Compañía :" />
	<s:ComboBox id="_idCompania" x="150" y="68" width="416" change="dataChange();companiaChange()"
				dataProvider="{SystemGlobals.COMPANIAS}" enabled="false" labelField="_nombre"></s:ComboBox>
	<s:Label x="56" y="43" text="No. de Puesto :" />
	<s:TextInput id="_idFortia" x="150" y="38" width="53" enabled="false"/>
	
</s:TitleWindow>
