<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="602" height="334" 
	layout="absolute" 
	horizontalCenter="0" 
	title="Areas de Interés" 
	verticalCenter="0"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	showCloseButton="true">

	<mx:Script>
		<![CDATA[
			import mx.random.constants.SystemGlobals;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.random.events.SelectionEvent;
			import mx.random.events.StaticEvent;
			
			import mx.random.constants.Catalogs;
			import mx.random.windowManagers.PopManager;
			import mx.random.constants.Languages;
			import mx.random.forms.Validator;
			import mx.random.dataManagers.EventManager;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.web.WebApplication;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import mx.rpc.remoting.RemoteObject;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
[Bindable]	private var _Data:DataManager 				= new DataManager(this);
[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------

[Bindable]	public var _dataReady:Boolean 			= false;
[Bindable]	public var _newData:Boolean 			= false;
[Bindable]	public var _updateData:Boolean 			= false;
[Bindable]	private var _selectionMode:Boolean		= false;
[Bindable]	private var _multipleSelection:Boolean	= false;

			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			private var _idArea:Number;
			private var _idDepartamento:Number;
			private var _idPuesto:Number;
[Bindable]	private var _puestos:ArrayCollection;	
[Bindable]	private var _deptos:ArrayCollection;
[Bindable]	private var _areas:ArrayCollection;
		
			private var _selectedId:Number = 0;
			private var _selectedName:String = "";
			private var _serviceName  		= "AreasInteres";
			private var _mainId  			= "_idAreaInteres";
			private var _mainFocusField:String      = "_area";
			private var _idEmpleado:String;
			public function set relationIdValue(value:String):void{
				_idEmpleado = value;
			}
			private var _selectMode:Boolean = false;
			//-----------Local Vars -----------
			
//---------------------------- Context ---------------------------------------------            

   			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
				initView();
			}

			public function set workManager(value:Object):void{
				_workManager = value;
			}

			public function set selectionMode(value:Boolean):void{
				_selectionMode = value;
			}
			
			public function set multipleSelection(value:Boolean):void{
				_multipleSelection = value;
			}

			public function set webApplication(value:WebApplication):void{
				_webApplication = value;				
			}
			public function get webApplication():WebApplication{ return _webApplication; } 
						
//---------------------------- Context ---------------------------------------------  

//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				var dataObject = new Object();
				if(_dataList.selectedIndex==-1) {
					dataObject._idPuesto = 0;
				}else{
					dataObject = _dataList.selectedItem;
				}
				return {dataObject:dataObject,
						selectionMode:_selectMode,
						area: _area.text,
						puesto: _puesto.text,									
						webApplication: _webApplication,
						workManager: this
						}					
			}

			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				

				var validFields:ArrayCollection = Valid.validFields;
				for(var n:Number = 0;n<validFields.length;n++){					
					this[validFields[n].obj.name].addEventListener(Event.CHANGE,onFocusOut);
				}
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}

			private function onFocusOut(e:Event):void{
				if(_newData||_updateData) Valid.validateAll();//Valid.validateOne(e.currentTarget.name);
			}
			
			private function extraCreateData(params:Object):Object{
				params["_idEmpleado"] 		= _idEmpleado;
				params['_idArea'] 			= _idArea;
				params['_idDepartamento'] 	= _idDepartamento;
				params['_idPuesto'] 		= _idPuesto;
				return params;
			}
			
			private function createRecordExtras():void{
			
				_idArea			= -1;
				_idDepartamento	= -1;
				_idPuesto		= -1;
		
			}
			
			private function extraUpdateData(params:Object):Object{	
				params["_idEmpleado"] 		= _idEmpleado;
				params['_idArea'] 			= _idArea;
				params['_idDepartamento'] 	= _idDepartamento;
				params['_idPuesto'] 		= _idPuesto;		
				return params;
			}
			
			private function loadExtraFields(params:Object):void{
				
			}
			
			private function findIndexDepto(value:Number):Number{
				var res:Number = -1;
				for(var n:Number = 0;n<_deptos.length;n++){
					if(_deptos[n]._idDepartamento==value) res = n;
				}
				return res;
			}
			
			private function findIndexPuesto(value:Number):Number{
				var res:Number = -1;
				for(var n:Number = 0;n<_puestos.length;n++){
					if(_puestos[n]._idPuesto==value) res = n;
				}
				return res;
			}
			
			private function forceImports():void{
				Catalogs;
			}
			
			public function initView():void{
				_areas = SystemGlobals.AREAS;
				_deptos = SystemGlobals.DEPARTAMENTOS;
				_puestos = SystemGlobals.PUESTOS;				
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = ["_idAreaInteres","_idEmpleado","_idArea","_idDepartamento","_idPuesto"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				loadScroll();
			}
			
			public function imageUploadReady(data:Object):void{
				
			}

			// ------------------- View Extra Data -------------------------------

			private function loadScroll():void{
				_dataList.visible = false;
				for(var n:Number = 0;n<100;n++){
					_DataResult.addItem({i:0});
				}
			}

			private function initData():void{
				_MainService.getFields();
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
					if(_selectionMode&&_dataList.selectedIndex!=-1) StaticEvent.dispatchEvent(new SelectionEvent(SelectionEvent.SELECTION_COMPLETE,_dataList.selectedItems));
            		dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
            		PopUpManager.removePopUp(this);
            }
            
//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;				
				this[_mainFocusField].setFocus();
				createRecordExtras();
				Valid.validateAll();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}

			private function updateData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
					_dataIndex =_dataList.selectedIndex;
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.deleteRecord(params);
					_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();
				Valid.validateAll();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}

			private function dataChange():void{
				_updateData = true;
			}

			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			
//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
				_dataList.visible = true;
				
			}
			
			private function getData():void{
				_MainService.getRecords(_idEmpleado);
				_MainService.getRecords.addEventListener(ResultEvent.RESULT,onGetDataResult);
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay datos para este registro...\nCrear un registro nuevo?","Atención",Alert.OK|Alert.NO,this,alertNewHandler);
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);
					_dataList.selectedIndex = _dataIndex;
					_dataList.scrollToIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
					updatePuestos();
				}
				_dataReady = true;
				resetBooleans();
			}
			
			private function alertNewHandler(e:CloseEvent):void{
				if(e.detail == Alert.OK){
					newData()
				}
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}

			private function onDataSelect():void{
				if(_dataList.selectedIndex!=-1) {
					_Data.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem[_mainId];
					updatePuestos()
				}
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				getData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				getData();
			}
			
//-------------------------------- ResultsEvents --------------------------------------	

//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean=false):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{			
	            		PopUpManager.removePopUp(e.target as TitleWindow);
			}
//-------------------------------- POP UP WINDOW --------------------------------------

//-------------------------------- Search Engine --------------------------------------

			private function searchFilter():void{
               			_DataResult.filterFunction = vlidateSearch;
               			_DataResult.refresh();
           		}
          
	       		private function vlidateSearch(item:Object):Boolean{
	           		var isMatch:Boolean = false;           
	           		/*if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
	               			isMatch = true
	           		}           */   
	           		return isMatch;              
	       		}
	       	
	       		private function search():void{
				//_searchFilter = _searchField.text;
				searchFilter();
			}
			private var _searchFilter:String 			= new String();
[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Area :",     	value:"_idArea"},{label:"Puesto :",     	value:"_idPuesto"}]);

//-------------------------------- Search Engine --------------------------------------					
			
			private function updatePuestos():void{
				
				var idArea:Number 	= Converter.findIndex(SystemGlobals.AREAS,			"_idArea",			_dataList.selectedItem._idArea);
				var idDepto:Number 	= Converter.findIndex(SystemGlobals.DEPARTAMENTOS,	"_idDepartamento",	_dataList.selectedItem._idDepartamento)
				var idPuesto:Number = Converter.findIndex(SystemGlobals.PUESTOS,			"_idPuesto",		_dataList.selectedItem._idPuesto);

				
				
				if(idArea!=-1)		{_area.text 	= SystemGlobals.AREAS[idArea]._nombre }else{ _area.text 		= ""};
				if(idDepto!=-1)		{_depto.text 	= SystemGlobals.DEPARTAMENTOS[idDepto]._nombre }else{ _depto.text 		= ""};
				if(idPuesto!=-1)	{_puesto.text 	= SystemGlobals.PUESTOS[idPuesto]._nombre }else{ _puesto.text 		= ""};
			
				
				
				_idArea 		= _dataList.selectedItem._idArea;
				_idDepartamento = _dataList.selectedItem._idDepartamento;
				_idPuesto 		= _dataList.selectedItem._idPuesto;
		
			}
			
		   	
		   	private function openPuesto():void{
				_selectMode = true;
				StaticEvent.addEventListener(SelectionEvent.SELECTION_COMPLETE,onPuestoSelectcomplete);
				openPopUp("Catalogo_Puestos",true);
			}
			
			private function onPuestoSelectcomplete(e:SelectionEvent):void{ 
				var idCia:Number 		= Converter.findIndex(SystemGlobals.COMPANIAS,		"_idCompania",		e.itemData._idCompania);
				var idArea:Number 		= Converter.findIndex(SystemGlobals.AREAS,			"_idArea",			e.itemData._idArea);
				var idDepto:Number 		= Converter.findIndex(SystemGlobals.DEPARTAMENTOS,	"_idDepartamento",	e.itemData._idDepartamento);
				var idPuesto:Number 	= Converter.findIndex(SystemGlobals.PUESTOS,		"_idPuesto",		e.itemData._idPuesto);
				var idCategoria:Number 	= Converter.findIndex(SystemGlobals.CATEGORIAS,		"_idCategoria",		e.itemData._idCategoria);
				var idCECO:Number 		= Converter.findIndex(SystemGlobals.CECO,			"_idCECO",			e.itemData._idCECO);
				
				if(idArea!=-1)		{_area.text 	= SystemGlobals.AREAS[idArea]._nombre }else{ _area.text 		= ""};
				if(idDepto!=-1)		{_depto.text 	= SystemGlobals.DEPARTAMENTOS[idDepto]._nombre }else{ _depto.text 		= ""};
				if(idPuesto!=-1)	{_puesto.text 	= SystemGlobals.PUESTOS[idPuesto]._nombre }else{ _puesto.text 		= ""};

				
		
				_idArea 		= e.itemData._idArea;
				_idDepartamento = e.itemData._idDepartamento;
				_idPuesto 		= e.itemData._idPuesto;

				
				_updateData = true;
				StaticEvent.removeEventListener(SelectionEvent.SELECTION_COMPLETE,onPuestoSelectcomplete);
			}	
			
			private function puestoFunction(item:Object,dg:DataGridColumn):String{
				var res:String = "";
				if(item[dg.dataField]){
					res = _puestos[findIndexPuesto(item[dg.dataField])]._nombre;
				}
				return res;
			}
			
		]]>
	</mx:Script>

	<mx:DataGrid height="166" dataProvider="{_DataResult}" id="_dataList" change="onDataSelect();" allowMultipleSelection="{_multipleSelection}"  enabled="{_dataReady&amp;&amp;!_newData}" width="476" x="110" y="96">
		<mx:columns>					
			<mx:DataGridColumn headerText="Puesto :" dataField="_idPuesto" labelFunction="puestoFunction"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:Button label="Nuevo" width="80" enabled="{_dataReady}" visible="{!_newData&amp;&amp;!_updateData}" click="newData();" x="110" y="270"/>
	<mx:Button label="Cancelar" width="80" enabled="{_dataReady}" visible="{_newData||_updateData}" click="cancel();" x="198" y="270"/>
	<mx:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="{_newData}" click="createData();" x="110" y="270"/>
	<mx:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData}" visible="{!_newData&amp;&amp;!_updateData}" click="deleteDataAlert();" x="198" y="270"/>
	<mx:Button label="Actualizar" width="80" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}" visible="{_updateData&amp;&amp;!_newData}" click="updateData();" x="110" y="270"/>
	<mx:Button label="Regresar" click="closeWindow();" width="145"  enabled="{!_newData}" x="441" y="270"/>
	<mx:Label x="10" y="40" text="Departamento :" />
	<mx:Label x="52" y="68" text="Puesto :" />
	<mx:Label x="52" y="68" text="Puesto :" />
	<mx:TextInput x="110" y="66" width="326" id="_puesto" editable="false"/>
	<mx:Label x="65" y="12" text="Area :" />
	<mx:Button x="444" y="65" icon="@Embed(source='../assets/Icons/Buttons/Search.png')" click="openPuesto()" id="button10" width="142" label="Buscar Puesto" textAlign="left" tabIndex="29"/>
	<mx:TextInput x="110" y="10" width="326" id="_area" editable="false"/>
	<mx:TextInput x="110" y="38" width="326" id="_depto" editable="false"/>
	
</mx:TitleWindow>
