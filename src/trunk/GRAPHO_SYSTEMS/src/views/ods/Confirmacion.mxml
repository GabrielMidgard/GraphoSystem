<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="746" height="718" backgroundAlpha="1.0" contentBackgroundColor="#D5FBDB"
			   title="Confirmación">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Button label="Nuevo" width="80" enabled="{_dataReady}" visible="false" click="newData();" y="633" x="101"/>
	<s:Button label="Cancelar" width="80" enabled="{_newData||_updateData}" visible="true" click="cancel();" y="633" x="189"/>
	<s:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="{_newData}" click="createData();" y="633" x="101"/>
	<s:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData}" visible="false" click="deleteDataAlert();" y="633" x="189"/>
	<s:Button label="Actualizar" width="80" enabled="{_updateData&amp;&amp;!_newData}" visible="true" click="updateData();" y="633" x="101"/>
	<s:Button label="Regresar" click="closeWindow();" width="145"  enabled="{!_newData}" y="633" x="583"/>
	<s:Label x="659" y="285" color="#767474" fontSize="10" fontStyle="italic" text="No de Remisión"/>
	<s:Label x="105" y="335" color="#767474" fontSize="10" fontStyle="italic" text="de Servicio"/>
	<s:Label x="105" y="375" color="#767474" fontSize="10" fontStyle="italic" text="del domicilio"/>
	<s:Label x="103" y="454" color="#767474" fontSize="10" fontStyle="italic" text="Asignación de Fecha y Técnico"/>
	<s:Label x="102" y="497" color="#767474" fontSize="10" fontStyle="italic" text="Promesa de visita"/>
	<s:Label x="102" y="248" color="#767474" fontSize="10" fontStyle="italic" text="pago incial"/>
	<s:Label x="56" y="266" text="Fecha :"/>
	<s:TextInput id="_fechaPrePagoInicial" x="103" y="259" width="78" change="dataChange();"
				 fontWeight="normal" tabIndex="1"/>
	<s:Label x="42" y="352" text="Domicilio :"/>
	<s:Label x="64" y="388" text="Notas:"/>
	<s:Label x="10" y="307" text="Total a Facturar :"/>
	<s:TextInput id="_totalFacturar" x="104" y="300" width="150" change="dataChange();"
				 fontWeight="normal" tabIndex="4"/>
	<s:Label x="265" y="307" text="No de Factura :"/>
	<s:TextInput id="_noFactura" x="359" y="300" width="55" change="dataChange();"
				 fontWeight="normal" tabIndex="5"/>
	<s:TextInput id="_noRemision" x="660" y="298" width="70" change="dataChange();"
				 fontWeight="normal" tabIndex="7"/>
	<s:Label x="423" y="306" text="Total a Remisionar :"/>
	<s:TextInput id="_totalRemisionar" x="541" y="298" width="109" change="dataChange();"
				 fontWeight="normal" tabIndex="6"/>
	<s:Label x="421" y="474" text="Se informó visita a:"/>
	<s:TextInput id="_seInformoVisitaA" x="536" y="466" width="192" change="dataChange();"
				 fontWeight="normal" tabIndex="11"/>
	<s:Label x="262" y="265" text="Importe :"/>
	<s:Label x="421" y="265" text="Forma de Pago :"/>
	<s:TextInput id="_importe" x="316" y="258" width="96" change="dataChange();" fontWeight="normal"
				 tabIndex="2"/>
	<s:Button x="189" y="259" width="63" height="23" label="Hoy" click="getCurrentTime();"
			  enabled="{!_newData}"/>
	<s:Button visible="false" x="103" y="549" width="70" height="23" label="Adjuntos"
			  enabled="{!_newData}"/>
	<s:ComboBox id="_formaPago" x="521" y="257" width="207" change="dataChange();"
				dataProvider="{ConstantData.PaymentTypes}" fontStyle="italic" labelField="label"
				tabIndex="3"> </s:ComboBox>
	<s:Label x="16" y="473" text="Responsable :"/>
	<s:ComboBox id="_responsableAsignacionDeFecha" x="103" y="466" width="307" change="dataChange();"
				dataProvider="{SystemGlobals.EMPLEADOS}" fontStyle="italic"
				labelFunction="concatenateName" tabIndex="10"> </s:ComboBox>
	<s:Label x="308" y="515" text="Técnico Asignado :"/>
	<s:ComboBox id="_tecnicoAsignado" x="421" y="509" width="307" change="dataChange();"
				dataProvider="{SystemGlobals.EMPLEADOS}" fontStyle="italic"
				labelFunction="concatenateName" tabIndex="13"> </s:ComboBox>
	<s:Label x="57" y="514" text="Fecha :"/>
	<s:TextInput id="_fechaPromesaVisita" x="103" y="507" width="78" change="dataChange();"
				 fontWeight="normal" tabIndex="12"/>
	<s:Button x="193" y="507" width="63" height="23" label="Hoy" click="getCurrentTime2();"
			  enabled="{!_newData}"/>
	<s:TextInput id="_nombreEmpresa" x="102" y="62" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEmpresa}"/>
	<s:TextInput id="_ciudad" x="102" y="100" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._ciudad}"/>
	<s:TextInput id="_nombreEstado" x="262" y="100" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEstado}"/>
	<s:Label x="263" y="89" color="#767474" fontSize="10" fontStyle="italic" text="estado"/>
	<s:Label x="102" y="89" color="#767474" fontSize="10" fontStyle="italic" text="ciudad"/>
	<s:TextInput id="_telefonoCasa" x="420" y="62" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoCasa}"/>
	<s:TextInput id="_telefonoOficina" x="578" y="62" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoOficina}"/>
	<s:TextInput id="_mailSecundario" x="578" y="100" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailSecundario}"/>
	<s:TextInput id="_mailPrincipal" x="420" y="100" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailPrincipal}"/>
	<s:Label x="421" y="90" color="#767474" fontSize="10" fontStyle="italic" text="mails"/>
	<s:Label x="421" y="51" color="#767474" fontSize="10" fontStyle="italic" text="teléfonos"/>
	<s:Label x="51" y="68" text="Cliente :"/>
	<s:Label x="102" y="51" color="#767474" fontSize="10" fontStyle="italic" text="nombre"/>
	<s:Label x="179" y="11" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:Label x="255" y="11" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:Label x="331" y="10" color="#767474" fontSize="10" fontStyle="italic" text="estatus"/>
	<s:Label x="102" y="11" color="#767474" fontSize="10" fontStyle="italic" text="número"/>
	<s:Label x="68" y="27" fontWeight="bold" text="OS :"/>
	<s:Label x="418" y="10" color="#767474" fontSize="10" fontStyle="italic" text="área de soporte"/>
	<s:Label x="579" y="10" color="#767474" fontSize="10" fontStyle="italic" text="servicio"/>
	<s:TextInput id="_nombreContacto" x="102" y="140" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_orderHeader._nombreContacto}"/>
	<s:TextInput id="_operador" x="102" y="173" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_orderHeader._operador}"/>
	<s:Label x="38" y="179" text="Operador :"/>
	<s:Label x="102" y="129" color="#767474" fontSize="10" fontStyle="italic" text="reportó"/>
	<s:Label x="420" y="129" color="#767474" fontSize="10" fontStyle="italic" text="atendió"/>
	<s:TextInput id="_nombreEmpleado" x="420" y="140" width="308" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_orderHeader._nombreEmpleado}"/>
	<s:TextInput id="_serie" x="578" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._serie}"/>
	<s:TextInput id="_modelo" x="420" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._modelo}"/>
	<s:Label x="421" y="201" color="#767474" fontSize="10" fontStyle="italic" text="modelo"/>
	<s:Label x="104" y="199" color="#767474" fontSize="10" fontStyle="italic" text="tecnología"/>
	<s:Label x="264" y="200" color="#767474" fontSize="10" fontStyle="italic" text="fabricante"/>
	<s:Label x="579" y="201" color="#767474" fontSize="10" fontStyle="italic" text="no. serie"/>
	<s:Label x="51" y="217" text="Equipo :"/>
	<s:TextInput id="_nombreTipo" x="102" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreTipo}"/>
	<s:TextInput id="_nombreMarca" x="262" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreMarca}"/>
	<s:Label x="659" y="200" color="#767474" fontSize="10" fontStyle="italic" text="año de fab."/>
	<s:TextInput id="_anioFabricacion" x="658" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._anioFabricacion}"/>
	<s:ComboBox id="_idAreaSoporteTecnico" x="420" y="22" width="150" change="dataChange();"
				contentBackgroundColor="#E7E7E7" dataProvider="{SystemGlobals.AREAS_SOPORTE}"
				enabled="false" fontWeight="bold" labelField="_areaSoporteTecnico"
				selectedIndex="{_orderHeader._idAreaSoporteTecnico}"></s:ComboBox>
	<s:ComboBox id="_idTipoServicio" x="577" y="22" width="151" change="dataChange();"
				contentBackgroundColor="#E7E7E7" dataProvider="{SystemGlobals.TIPOS_SERVICIO}"
				enabled="false" fontWeight="bold" labelField="_nombre"
				selectedIndex="{_orderHeader._idTipoServicio}"></s:ComboBox>
	<s:ComboBox id="_idEstatus" x="331" y="22" width="81" change="dataChange();"
				contentBackgroundColor="#E7E7E7" dataProvider="{SystemGlobals.ORDEN_ESTATUS}"
				enabled="false" fontWeight="bold" labelField="_nombreEstatus"
				selectedIndex="{_orderHeader._idEstatus}"></s:ComboBox>
	<s:TextInput id="_idOrden" x="101" y="23" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" text="{_orderHeader._idOrden}" textAlign="center"/>
	<s:TextInput id="_fechaCreacion" x="177" y="23" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" text="{_orderHeader._fechaCreacion}" textAlign="center"/>
	<s:TextInput id="_horaCreacion" x="253" y="23" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" text="{_orderHeader._horaCreacion}" textAlign="center"/>
	<s:ComboBox id="_domicilioServicio" x="104" y="346" width="626" change="dataChange();"
				dataProvider="{_direccionesCliente}" labelFunction="concatenateAddresses"
				tabIndex="8"/>
	<s:TextArea id="_notasDomicilio" x="104" y="385" width="306" height="61" change="dataChange();"
				tabIndex="9"/>
	<s:TextArea id="_notasTecnicoAsignado" x="421" y="539" width="307" height="80"
				change="dataChange();" tabIndex="14"/>
	<s:Label x="375" y="549" text="Notas:"/>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.random.constants.Catalogs;
			import mx.random.constants.ConstantData;
			import mx.random.constants.Languages;
			import mx.random.constants.SystemGlobals;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.dataManagers.EventManager;
			import mx.random.forms.Validator;
			import mx.random.web.WebApplication;
			import mx.random.windowManagers.PopManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.StringUtil;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
			[Bindable]	private var _Data:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;//No podemos agregar nuevos en esta forma, sólo podemos actualizar Siempre mostrar boton actualizar
			
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number 			= 0;
			private var _selectedName:String 		= "";
			private var _serviceName  				= "Ordenes";
			private var _mainId  					= "_idOrden";
			private var _mainFocusField:String      = "_operador";
			private var _idOrdenSelected:Number		= -1;
			[Bindable] private var _cliente:Object = {};
			[Bindable] private var _equipo:Object = {};
			[Bindable] private var _orderHeader:Object = {};
			[Bindable] private var _direccionesCliente:ArrayCollection = new ArrayCollection();
			
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}

			public function set idOrden(value:Number):void{
				_idOrdenSelected = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				initView();
			}
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				
				//----------- Validaciones ---------------------------
				//Valid.addStringVal(_nombre,2,100,"Nombre");
				//Valid.addStringVal(_codigo,1,2,"Código");
				
				//----------- Validaciones ---------------------------
				
				
				Valid.validateOnChange = true;
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}
			
			private function extraCreateData(params:Object):Object{				
				//params["_newsImage"] = _image;
				return params;
			}
			
			private function createRecordExtras():void{
				//_image = "defaultNew.jpg";
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_color'] = areaColor.selectedColor;	
				params["_idOrden"] = _idOrdenSelected
				return params;
			}
			
			private function loadExtraFields(params:Object):void{				
				//_image = params["_newsImage"];
			}
			
			private function forceImports():void{
				
			}
			
			private function concatenateName(value:Object):String
			{
				var nombre:String = "";
				if(value != null){
					if(value._nombre != null && value._nombre != undefined){
						nombre += StringUtil.trim(value._nombre) + " ";
					}
					if(value._paterno != null && value._paterno != undefined){
						nombre += StringUtil.trim(value._paterno) + " ";
					}
					if(value._materno != null && value._materno != undefined){
						nombre += StringUtil.trim(value._materno) + " ";
					}	
				}
				return nombre;
			}
			
			public function initView():void{
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = [];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
			}
			
			// ------------------- View Extra Data -------------------------------
			
			
			private function initData():void{
				_MainService.getFields("columnsFromConfirmationForm");
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;
				Valid.validateAll();
				this[_mainFocusField].setFocus();
				createRecordExtras();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function updateData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					//params[_idOrdenSelected] = _dataList.selectedItem[_mainId]; PREGUNTAR A CARLOS!
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
					//_dataIndex =_dataList.selectedIndex;
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			
			private function deleteDataAlert():void{
				/*if(_dataList.selectedIndex!=-1){
				Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
				Alert.show("No hay registro selecionado","Error");
				}*/
			}
			
			private function deleteData(e:CloseEvent):void{
				/*if(e.detail==Alert.YES){
				var params:Object = new Object();
				params[_mainId] = _dataList.selectedItem[_mainId];
				_MainService.deleteRecord(params);
				_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataReady = false;
				}*/
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();
				getData();
				Valid.validateAll();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			private function dataChange():void{
				_updateData = true;
			}
			
			private function getCurrentTime():void{
				var currentDateTime:Date = new Date();
				_fechaPrePagoInicial.text = currentDateTime.fullYear + "-" + (currentDateTime.month+1) + "-" + currentDateTime.date;
				dataChange();
			}
			
			private function getCurrentTime2():void{
				var currentDateTime:Date = new Date();
				_fechaPromesaVisita.text = currentDateTime.fullYear + "-" + (currentDateTime.month+1) + "-" + currentDateTime.date;
				dataChange();
			}
			
			private function openImageEditor():void{
				/*if(_dataList.selectedIndex!=-1){
				//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
				openPopUp("managers.ImageManager")
				}else{
				Alert.show("No hay registro selecionado","Error");
				}*/
			}
			//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
				
				
			}
			
			private function getData():void{
				_MainService.getSpecificOrderHeader(_idOrdenSelected);//Gets the basic header data I mean status, progress, date, 
				_MainService.getConfirmationSpecificOrder(_idOrdenSelected);//Gets the rest of the values of the form
				_MainService.getClientFromOrder(_idOrdenSelected);//Gets client attached to the order
				_MainService.getEquipmentFromOrder(_idOrdenSelected);//Gets the equipment attached to the order
				_MainService.getAddressesFromClient(_idOrdenSelected);
				
				_MainService.getSpecificOrderHeader.addEventListener(ResultEvent.RESULT,onGetSpecificOrderResult);
				_MainService.getClientFromOrder.addEventListener(ResultEvent.RESULT,onGetDataClientResult);
				_MainService.getConfirmationSpecificOrder.addEventListener(ResultEvent.RESULT,onGetConfirmationSpecificOrderResult);
				_MainService.getEquipmentFromOrder.addEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				_MainService.getAddressesFromClient.addEventListener(ResultEvent.RESULT,onGetAddressesFromClientResult);
				resetBooleans();
			}

			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}
			
			private function onDataSelect():void{
				/*if(_dataList.selectedIndex!=-1) {
				_Data.loadData(_dataList.selectedItem);
				_dataIndex =_dataList.selectedIndex;
				loadExtraFields(_dataList.selectedItem);
				_selectedId = _dataList.selectedItem[_mainId];
				}*/
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				getData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				getData();
			}
			
			//-------------------------------- ResultsEvents --------------------------------------	
			private function onGetConfirmationSpecificOrderResult(e:ResultEvent):void{
				_MainService.getConfirmationSpecificOrder.removeEventListener(ResultEvent.RESULT,onGetConfirmationSpecificOrderResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No existe orden con el id especificado","Atención")
				}else{
					_Data.loadData(_DataResult[0]); //Sólo debe de haber un registro o ninguno
				}
				_dataReady = true;	
			}
			
			private function onGetSpecificOrderResult(e:ResultEvent):void{
				_MainService.getSpecificOrderHeader.removeEventListener(ResultEvent.RESULT,onGetSpecificOrderResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					_orderHeader = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_orderHeader = {};
				}
			}
			
			private function onGetAddressesFromClientResult(e:ResultEvent):void{
				_MainService.getAddressesFromClient.removeEventListener(ResultEvent.RESULT,onGetAddressesFromClientResult);
				_direccionesCliente = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
				}else{
					_Data.loadData(_DataResult[0]); //Sólo debe de haber un registro o ninguno
				}
			}
			
			private function concatenateAddresses(data:Object):String{
				var direccionCompleta:String = "";
				if(data != null){
					if(data._calle){
						direccionCompleta += data._calle + "  ";
					}
					if(data._noExterior){
						direccionCompleta += "Ext. " + data._noExterior + "  ";
					}
					if(data._noInterior){
						direccionCompleta += "Int. " + data._noInterior + "  ";
					}
					if(data._colonia){
						direccionCompleta += data._colonia + "  ";
					}
					if(data._cp){
						direccionCompleta += data._cp + "   ";
					}
					if(data._ciudad){
						direccionCompleta += data._ciudad + "   ";
					}
					if(data._idEstado){
						direccionCompleta += ConstantData.NationalStates[Number(data._idEstado)].label;
					}	
				}
				return direccionCompleta;
			}
			
			private function onGetDataClientResult(e:ResultEvent):void{
				_MainService.getClientFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataClientResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					resArr[0]._nombreEstado = ConstantData.NationalStates[Number(resArr[0]._estado)].label;
					_cliente = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_cliente = {};
				}
			}
			
			private function onGetDataSystemResult(e:ResultEvent):void{
				_MainService.getSystemFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					_equipo = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_equipo = {};
				}
			}
			
			//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean = true):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{
				PopUpManager.removePopUp(e.target as TitleWindow);
			}
			//-------------------------------- POP UP WINDOW --------------------------------------
			
			//-------------------------------- Search Engine --------------------------------------
			
			private function searchFilter():void{
				_DataResult.filterFunction = vlidateSearch;
				_DataResult.refresh();
			}
			
			private function vlidateSearch(item:Object):Boolean{
				var isMatch:Boolean = false;           
				/*if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
				isMatch = true
				}        */      
				return isMatch;              
			}
			
			private function search():void{
				/*_searchFilter = _searchField.text;
				searchFilter();
				*/
			}
			private var _searchFilter:String 			= new String();
			[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Id",     	value:"_idArea"},{label:"Nombre",     	value:"_nombre"}]);
			
			//-------------------------------- Search Engine --------------------------------------	
			
			
			
		]]>
	</fx:Script>
	
	
	
</s:TitleWindow>
