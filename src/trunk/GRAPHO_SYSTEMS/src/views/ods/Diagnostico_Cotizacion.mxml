<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="1268" height="806" backgroundAlpha="1.0" contentBackgroundColor="#D5E7FB"
			   title="Cotización Diagnóstico">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Button label="Regresar" click="closeWindow();" width="130"  enabled="{!_newData}" y="717" x="1111"/>
	<s:TextInput id="_costoManoObra" x="892" y="414" width="121" change="dataOrderChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal" tabIndex="10"/>
	<s:TextInput id="_costoRefaccion" x="1111" y="412" width="130" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" enabled="false" fontStyle="normal"/>
	<s:TextInput id="_viaticoTotal" x="892" y="451" width="121" contentBackgroundColor="#D5FBDB"
				 enabled="false" fontStyle="normal"
				 text="{Math.round((Number(_costoTransporte.text)+Number(_costoHotel.text)+Number(_costoComidas.text)+Number(_costoFleteSobreEquipaje.text)+Number(_costoGastosDiversos.text))*100)/100}"/>
	<s:TextInput id="_costoTransporte" x="892" y="300" width="121" change="dataOrderChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal" tabIndex="4"/>
	<s:Label x="820" y="307" text="Transporte :"/>
	<s:Label x="892" y="289" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:TextInput id="_costoGastosDiversos" x="1110" y="373" width="131" change="dataOrderChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal" tabIndex="9"/>
	<s:Label x="1058" y="380" text="Gastos :"/>
	<s:Label x="1111" y="363" color="#767474" fontSize="10" fontStyle="italic" text="diversos"/>
	<s:Label x="837" y="458" text="Viáticos :"/>
	<s:Label x="1044" y="419" text="Refacción :"/>
	<s:Label x="804" y="420" text="Mano de Obra :"/>
	<s:Label x="891" y="440" color="#767474" fontSize="10" fontStyle="italic" text="costo total"/>
	<s:Label x="1112" y="401" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:TextInput id="_nombreEmpresa0" x="892" y="490" width="122" contentBackgroundColor="#D5FBDB"
				 enabled="false" fontStyle="normal"
				 text="{Math.round((Number(_viaticoTotal.text)+Number(_costoManoObra.text)+Number(_costoRefaccion.text))*100)/100}"/>
	<s:Label x="819" y="497" text="Costo Total :"/>
	<s:Label x="892" y="403" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:TextInput id="_costoHotel" x="892" y="337" width="121" change="dataOrderChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal" tabIndex="6"/>
	<s:Label x="850" y="344" text="Hotel :"/>
	<s:Label x="892" y="326" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:TextInput id="_costoFleteSobreEquipaje" x="1110" y="337" width="131"
				 change="dataOrderChange();" contentBackgroundColor="#D5FBDB" fontStyle="normal"
				 tabIndex="7"/>
	<s:Label x="1071" y="344" text="Flete :"/>
	<s:Label x="1074" y="306" text="Tipo :"/>
	<s:Label x="1110" y="327" color="#767474" fontSize="10" fontStyle="italic" text="y sobre equipaje"/>
	<s:TextInput id="_costoComidas" x="892" y="375" width="122" change="dataOrderChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal" tabIndex="8"/>
	<s:Label x="828" y="382" text="Comidas :"/>
	<s:Label x="892" y="364" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:Label x="1111" y="289" color="#767474" fontSize="10" fontStyle="italic" text="transporte"/>
	
	<s:ComboBox id="_tipoTransporte" x="1109" y="300" width="132" change="dataOrderChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{ConstantData.TipoTransporte}"
				fontWeight="bold" labelField="label" tabIndex="5"></s:ComboBox>
	<s:DataGrid id="_dataList" x="113" y="258" width="625" height="446"
				contentBackgroundColor="#D5FBDB" dataProvider="{_diagnosticos}"
				enabled="{_dataReady&amp;&amp;!_newData}" requestedRowCount="4">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="falla" headerText="Diagnóstico"
							  itemRenderer="renderers.Seguimiento_ItemRenderer6"></s:GridColumn>
			</s:ArrayList>
		</s:columns>	
		
	</s:DataGrid>
	<s:TextInput id="_tipoCambio" x="893" y="140" width="43" change="dataOrderChange();"
				 chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB" enabled="true"
				 fontStyle="normal" tabIndex="1"/>
	<s:TextInput id="_fechaCotizacion" x="1087" y="140" width="89" change="dataOrderChange();"
				 chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB" enabled="true"
				 fontStyle="normal" tabIndex="2"/>
	<s:Label x="795" y="146" text="Tipo de Cambio :"/>
	<s:Label x="983" y="147" text="Fecha Cotización :"/>
	<s:Label x="783" y="187" text="Responsable Cot. :"/>
	<s:ComboBox id="_responsableCotizacion" x="893" y="181" width="348" change="updateResponsible();"
				contentBackgroundColor="#D5FBDB" dataProvider="{SystemGlobals.EMPLEADOS}"
				enabled="true" labelFunction="concatenateName" tabIndex="3"></s:ComboBox>
	<s:Label x="845" y="224" text="Puesto :"/>
	<s:ComboBox id="_idPuesto" x="894" y="219" width="348" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{SystemGlobals.PUESTOS}"
				enabled="false" labelField="_nombre"></s:ComboBox>
	<s:Label x="804" y="264" text="Departamento :"/>
	<s:ComboBox id="_idDepartamento" x="893" y="258" width="348" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{SystemGlobals.DEPARTAMENTOS}"
				enabled="false" labelField="_nombre"></s:ComboBox>
	<s:Button x="1185" y="139" width="56" height="23" label="Hoy" click="getCurrentTime();"
			  enabled="{!_newData}"/>
	<s:Button label="Actualizar" width="80" enabled="{_updateOrdenData&amp;&amp;!_newOrdenData}" visible="true" click="updateOrdenData();" y="717" x="893"/>
	<s:Button label="Cancelar" width="80" enabled="{_newOrdenData||_updateOrdenData}" visible="true" click="cancelOrder();" y="717" x="981"/>
	<s:Label x="836" y="28" text="Técnico :"/>
	<s:ComboBox id="_idTecnicoDiagnostico" x="890" y="21" width="351" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{SystemGlobals.EMPLEADOS}"
				enabled="false" fontStyle="italic" labelFunction="concatenateName"> </s:ComboBox>
	<s:Label x="809" y="68" text="Serv. Inicial :"/>
	<s:Label x="891" y="50" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:Label x="969" y="50" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:TextInput id="_fechaServInicial" x="891" y="61" width="70" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" enabled="false" fontWeight="normal"
				 textAlign="center"/>
	<s:TextInput id="_horaServInicial" x="968" y="61" width="70" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" enabled="false" fontWeight="normal"
				 textAlign="center"/>
	<s:ComboBox id="_tiempoUnidadDiagnostico" x="945" y="99" width="93" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{ConstantData.TiempoEstimado}"
				enabled="false" fontStyle="italic"> </s:ComboBox>
	<s:TextInput id="_tiempoNumeroDiagnostico" x="892" y="100" width="45" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" enabled="false" fontStyle="normal"
				 textAlign="center"/>
	<s:Label x="768" y="107" text="Tiempo diagnóstico :"/>
	<s:TextInput id="_fechaPagoInicial" x="892" y="525" width="121" change="dataOrderChange();"
				 chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB" enabled="true"
				 fontStyle="normal" tabIndex="11"/>
	<s:TextInput id="_importePagoInicial" x="892" y="556" width="121" change="dataOrderChange();"
				 chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB" enabled="true"
				 fontStyle="normal" tabIndex="12"/>
	<s:TextInput id="_cantidadComplemento" x="892" y="588" width="121" change="dataOrderChange();"
				 chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB" enabled="true"
				 fontStyle="normal" tabIndex="12"/>
	<s:TextArea id="_observacionesCotDiag" x="893" y="622" width="348" height="82"
				change="dataOrderChange();" chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB"
				enabled="true" fontStyle="normal" tabIndex="14"/>
	<s:Label x="752" y="595" text="Cantidad complemento :"/>
	<s:Label x="744" y="626" text="Observaciones Cot. Diag :"/>
	<s:Label x="756" y="563" text="Importe de pago inicial :"/>
	<s:Label x="764" y="532" text="Fecha de pago inicial :"/>
	<s:Button x="1021" y="525" width="56" height="23" label="Hoy" click="getCurrentTime2();"
			  enabled="{!_newData}"/>
	<s:TextInput id="_nombreEmpresa" x="112" y="62" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEmpresa}"/>
	<s:TextInput id="_ciudad" x="112" y="100" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._ciudad}"/>
	<s:TextInput id="_nombreEstado" x="272" y="100" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEstado}"/>
	<s:Label x="273" y="89" color="#767474" fontSize="10" fontStyle="italic" text="estado"/>
	<s:Label x="112" y="89" color="#767474" fontSize="10" fontStyle="italic" text="ciudad"/>
	<s:TextInput id="_telefonoCasa" x="430" y="62" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoCasa}"/>
	<s:TextInput id="_telefonoOficina" x="588" y="62" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoOficina}"/>
	<s:TextInput id="_mailSecundario" x="588" y="100" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailSecundario}"/>
	<s:TextInput id="_mailPrincipal" x="430" y="100" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailPrincipal}"/>
	<s:Label x="431" y="90" color="#767474" fontSize="10" fontStyle="italic" text="mails"/>
	<s:Label x="431" y="51" color="#767474" fontSize="10" fontStyle="italic" text="teléfonos"/>
	<s:Label x="61" y="68" text="Cliente :"/>
	<s:Label x="112" y="51" color="#767474" fontSize="10" fontStyle="italic" text="nombre"/>
	<s:Label x="189" y="11" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:Label x="265" y="11" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:Label x="341" y="10" color="#767474" fontSize="10" fontStyle="italic" text="estatus"/>
	<s:Label x="112" y="11" color="#767474" fontSize="10" fontStyle="italic" text="número"/>
	<s:Label x="78" y="27" fontWeight="bold" text="OS :"/>
	<s:Label x="428" y="10" color="#767474" fontSize="10" fontStyle="italic" text="área de soporte"/>
	<s:Label x="589" y="10" color="#767474" fontSize="10" fontStyle="italic" text="servicio"/>
	<s:TextInput id="_nombreContacto" x="112" y="140" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_orderHeader._nombreContacto}"/>
	<s:TextInput id="_operador" x="112" y="173" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_orderHeader._operador}"/>
	<s:Label x="48" y="179" text="Operador :"/>
	<s:Label x="112" y="129" color="#767474" fontSize="10" fontStyle="italic" text="reportó"/>
	<s:Label x="430" y="129" color="#767474" fontSize="10" fontStyle="italic" text="atendió"/>
	<s:TextInput id="_nombreEmpleado" x="430" y="140" width="308" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_orderHeader._nombreEmpleado}"/>
	<s:TextInput id="_serie" x="588" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._serie}"/>
	<s:TextInput id="_modelo" x="430" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._modelo}"/>
	<s:Label x="431" y="201" color="#767474" fontSize="10" fontStyle="italic" text="modelo"/>
	<s:Label x="114" y="199" color="#767474" fontSize="10" fontStyle="italic" text="tecnología"/>
	<s:Label x="274" y="200" color="#767474" fontSize="10" fontStyle="italic" text="fabricante"/>
	<s:Label x="589" y="201" color="#767474" fontSize="10" fontStyle="italic" text="no. serie"/>
	<s:Label x="61" y="217" text="Equipo :"/>
	<s:TextInput id="_nombreTipo" x="112" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreTipo}"/>
	<s:TextInput id="_nombreMarca" x="272" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreMarca}"/>
	<s:Label x="669" y="200" color="#767474" fontSize="10" fontStyle="italic" text="año de fab."/>
	<s:TextInput id="_anioFabricacion" x="668" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._anioFabricacion}"/>
	<s:ComboBox id="_idAreaSoporteTecnico" x="430" y="22" width="150" change="dataChange();"
				contentBackgroundColor="#E7E7E7" dataProvider="{SystemGlobals.AREAS_SOPORTE}"
				enabled="false" fontWeight="bold" labelField="_areaSoporteTecnico"
				selectedIndex="{_orderHeader._idAreaSoporteTecnico}"></s:ComboBox>
	<s:ComboBox id="_idTipoServicio" x="587" y="22" width="151" change="dataChange();"
				contentBackgroundColor="#E7E7E7" dataProvider="{SystemGlobals.TIPOS_SERVICIO}"
				enabled="false" fontWeight="bold" labelField="_nombre"
				selectedIndex="{_orderHeader._idTipoServicio}"></s:ComboBox>
	<s:ComboBox id="_idEstatus" x="341" y="22" width="81" change="dataChange();"
				contentBackgroundColor="#E7E7E7" dataProvider="{SystemGlobals.ORDEN_ESTATUS}"
				enabled="false" fontWeight="bold" labelField="_nombreEstatus"
				selectedIndex="{_orderHeader._idEstatus}"></s:ComboBox>
	<s:TextInput id="_idOrden" x="111" y="23" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" text="{_orderHeader._idOrden}" textAlign="center"/>
	<s:TextInput id="_fechaCreacion" x="187" y="23" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" text="{_orderHeader._fechaCreacion}" textAlign="center"/>
	<s:TextInput id="_horaCreacion" x="263" y="23" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" text="{_orderHeader._horaCreacion}" textAlign="center"/>
	<s:Button visible="{!_newData&amp;&amp;!_updateData}" x="617" y="715" width="121" height="24"
			  label="Establecer Precios" click="openPopUp(&quot;equipos.Refacciones&quot;,true);" enabled="{_diagnosticos.length>0}"/>
	<s:Button visible="{!_newData&amp;&amp;!_updateData}" x="489" y="715" width="121" height="24"
			  label="Recalcular precios" click="recalculatePrizes();" enabled="{_diagnosticos.length>0}"/>
	<s:Label x="891" y="10" color="#767474" fontSize="10" fontStyle="italic" text="que diagnosticó"/>
	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.random.constants.Catalogs;
			import mx.random.constants.Languages;
			import mx.random.constants.SystemGlobals;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.dataManagers.EventManager;
			import mx.random.forms.Validator;
			import mx.random.web.WebApplication;
			import mx.random.windowManagers.PopManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.random.constants.ConstantData;
			import mx.utils.StringUtil;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
			[Bindable]	private var _Data:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataDiagnostico:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;
			
			[Bindable]	public var _dataOrdenReady:Boolean 		= false;
			[Bindable]	public var _newOrdenData:Boolean 		= false;
			[Bindable]	public var _updateOrdenData:Boolean 	= false;
			
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number 			= 0;
			private var _selectedName:String 		= "";
			private var _idOrdenSelected:Number		= -1;
			private var _serviceName  				= "Ordenes";
			private var _mainId  					= "_idDiagnostico";
			private var _mainFocusField:String      = "_operador";
			private var sparePartsIds:Array = [];
			[Bindable] private var _cliente:Object = {};
			[Bindable] private var _equipo:Object = {};
			[Bindable] private var _orderHeader:Object = {};
			[Bindable] private var _cotizacion:Object = {};
			[Bindable] private var _diagnosticos:ArrayCollection = new ArrayCollection();
			
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				initView();	
			}
			
			public function set idOrden(value:Number):void{
				_idOrdenSelected = value;
			}
			
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this,
					idsRefacciones:this.sparePartsIds,
					idsPrediagnosticos:this.getPrediagnosticosIds()
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				
				//----------- Validaciones ---------------------------
				//Valid.addStringVal(_nombre,2,100,"Nombre");
				//Valid.addStringVal(_codigo,1,2,"Código");
				
				//----------- Validaciones ---------------------------
				
				
				Valid.validateOnChange = true;
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}
			
			private function extraCreateData(params:Object):Object{				
				//params["_newsImage"] = _image;
				return params;
			}
			
			private function createRecordExtras():void{
				//_image = "defaultNew.jpg";
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_color'] = areaColor.selectedColor;			
				return params;
			}
			
			private function loadExtraFields(params:Object):void{				
				//_image = params["_newsImage"];
			}
			
			private function forceImports():void{
				
			}
			
			private function concatenateName(value:Object):String
			{
				var nombre:String = "";
				if(value._nombre != null && value._nombre != undefined){
					nombre += StringUtil.trim(value._nombre) + " ";
				}
				if(value._paterno != null && value._paterno != undefined){
					nombre += StringUtil.trim(value._paterno) + " ";
				}
				if(value._materno != null && value._materno != undefined){
					nombre += StringUtil.trim(value._materno) + " ";
				}
				return nombre;
			}
			
			private function getPrediagnosticosIds():Array{
				var ids:Array = [];
				for(var i = 0; i < _diagnosticos.length; i++){
					var p = _diagnosticos.getItemAt(i);
					ids.push(p['_idDiagnostico']);
				}
				return ids;
			}
			
			private function recalcPrize(event:CloseEvent):void{
				if(event.detail == Alert.YES){
					var spares = this.sparePartsIds; 
					var prediagnostics = this.getPrediagnosticosIds();
					
					if(prediagnostics.length > 0 && spares.length > 0){
						for(var i = 0; i < prediagnostics.length; i++){
							for(var j = 0; j < spares.length; j++){
								_MainService.updatePrizesOfSpareParts(prediagnostics[i],spares[j]);		
								_MainService.updatePrizesOfSpareParts.addEventListener(ResultEvent.RESULT,onUpdatePrizesOfSparePartsResult);
							}
						}
					}	
				}
			}
			
			public function initView():void{
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = [];
				_DataDiagnostico.exceptions = ["_idDiagnostico","_descripcionFalla","_descripcionSolucion","_esPrediagnostico",
					"_fechaCreacion","_tiempoNumero","_tiempoUnidad","_porcentajeDificultad","_falla","_descripcionFallaReal","_descripcionAccion","_nombreRefaccion"
				];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				
				//_searchType.selectedIndex = 1;
			}
			
			public function imageUploadReady(data:Object):void{
				
			}
			
			// ------------------- View Extra Data -------------------------------
			
			
			private function initData():void{
				_MainService.getFields("columnsFromDiagnosticQuoteForm");
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;
				Valid.validateAll();
				this[_mainFocusField].setFocus();
				createRecordExtras();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}

			private function updateOrdenData():void{
				if(Valid.validateAll()){
					_dataOrdenReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					params["_idOrden"] = _idOrdenSelected
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.deleteRecord(params);
					_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();
				Valid.validateAll();
			}
			
			private function cancelOrder():void{
				getOrderData();
				resetOrderBooleans();
				Valid.validateAll();
			}
			
			private function getData():void{
				_MainService.getClientFromOrder(_idOrdenSelected);
				_MainService.getEquipmentFromOrder(_idOrdenSelected);
				_MainService.getPreDiagnosticRecordsFromOrder(_idOrdenSelected,0);//We send 0 because we want to get only DIAGNOSTIC data
				_MainService.getSpecificOrderHeader(_idOrdenSelected);				
				
				_MainService.getSpecificOrderHeader.addEventListener(ResultEvent.RESULT,onGetHeaderOrderResult);
				_MainService.getClientFromOrder.addEventListener(ResultEvent.RESULT,onGetDataClientResult);
				_MainService.getEquipmentFromOrder.addEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				_MainService.getPreDiagnosticRecordsFromOrder.addEventListener(ResultEvent.RESULT,onGetPreDiagnosticResult);
				getOrderData();
				resetBooleans();
			}
			
			private function fillDiagnosticGrid():void{
				_MainService.getPreDiagnosticRecordsFromOrder(_idOrdenSelected,0);//We send 0 because want to get only DIAGNOSTIC data
				_MainService.getPreDiagnosticRecordsFromOrder.addEventListener(ResultEvent.RESULT,onGetPreDiagnosticResult);
			}
			
			private function getOrderData():void{
				_MainService.getDiagnosticQuoteData(_idOrdenSelected);
				_MainService.getDiagnosticQuoteData.addEventListener(ResultEvent.RESULT,onGetOrderResult);
				resetOrderBooleans();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			private function resetOrderBooleans():void{
				_newOrdenData = false;
				_updateOrdenData = false;
			}
			
			private function dataChange():void{
				_updateData = true;
			}
			
			private function dataOrderChange():void{
				_updateOrdenData = true;
			}
			
			private function recalculatePrizes():void{
				Alert.show("¿Está seguro que desea recalcular los precios de las refacciones?.", "Recalcular Refacciones",
					mx.controls.Alert.YES | mx.controls.Alert.NO, this, recalcPrize);
			}
			
			private function updateResponsible():void{
				if(_responsableCotizacion.selectedIndex > 0){
					var userSelected = _responsableCotizacion.selectedItem;
					_idPuesto.selectedIndex = userSelected._idPuesto;
					_idDepartamento.selectedIndex = userSelected._idDepartamento;
					if(_responsableCotizacion.selectedIndex != _DataResult[0]._responsableCotizacion){
						dataOrderChange();
					}
				}
			}
			private function getCurrentTime():void{
				var currentDateTime:Date = new Date();
				_fechaCotizacion.text = currentDateTime.fullYear + "-" + (currentDateTime.month+1) + "-" + currentDateTime.date;
				dataOrderChange();
			}
			private function getCurrentTime2():void{
				var currentDateTime:Date = new Date();
				_fechaPagoInicial.text = currentDateTime.fullYear + "-" + (currentDateTime.month+1) + "-" + currentDateTime.date;
				dataOrderChange();
			}
			
			private function getSparePartsFromOrder():void{
				var ids:Array = [];
				if(_diagnosticos.length > 0){
					for(var i = 0; i < _diagnosticos.length; i++){
						ids.push(_diagnosticos[i]['_idDiagnostico']);
					}
					_MainService.getSparePartsFromOrder(ids.join(","));
					_MainService.getSparePartsFromOrder.addEventListener(ResultEvent.RESULT,onGetSparePartsFromOrderResult);
				}
			}
			
			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
			}
			
			
			private function onGetDataClientResult(e:ResultEvent):void{
				_MainService.getClientFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataClientResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					resArr[0]._nombreEstado = ConstantData.NationalStates[Number(resArr[0]._estado)].label;
					_cliente = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_cliente = {};
				}
			}
			
			private function onUpdatePrizesOfSparePartsResult(e:ResultEvent):void{
				_MainService.updatePrizesOfSpareParts.removeEventListener(ResultEvent.RESULT,onUpdatePrizesOfSparePartsResult);
				this.fillDiagnosticGrid();
			}
			
			private function onGetPreDiagnosticResult(e:ResultEvent):void{
				_MainService.getPreDiagnosticRecordsFromOrder.removeEventListener(ResultEvent.RESULT,onGetPreDiagnosticResult);
				_diagnosticos = Converter.arrayConverter(e.result);
				getSparePartsFromOrder();
				_dataReady = true;
			}
			
			private function onGetSparePartsFromOrderResult(e:ResultEvent):void{
				_MainService.getSparePartsFromOrder.removeEventListener(ResultEvent.RESULT,onGetSparePartsFromOrderResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					var total:Number = 0;
					for(var i = 0; i < resArr.length; i++){
						var r = resArr.getItemAt(i);
						if(r['_precioRefaccion'] != null && r['_precioRefaccion'] != undefined){
							total = (Math.round(total + Number(r['_precioRefaccion']))*100)/100 ;
						}
						this.sparePartsIds.push(r['_idRefaccion']);
					}
					this._costoRefaccion.text = total.toString();
				}
			}
			
			private function onGetOrderResult(e:ResultEvent):void{
				_MainService.getDiagnosticQuoteData.removeEventListener(ResultEvent.RESULT,onGetOrderResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No existe orden con el id especificado","Atención")
				}else{
					_Data.loadData(_DataResult[0]); //Sólo debe de haber un registro o ninguno
					updateResponsible();//Visualizar el puesto y departamento al que pertenezca el responsable
				}
				_dataOrdenReady = true;				
			}
			
			private function onGetHeaderOrderResult(e:ResultEvent):void{
				_MainService.getSpecificOrderHeader.removeEventListener(ResultEvent.RESULT,onGetHeaderOrderResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No existe orden con el id especificado","Atención")
				}else{
					_orderHeader = _DataResult[0];//Sólo debe de haber un registro o ninguno
				}
			}
			
			private function onGetDataSystemResult(e:ResultEvent):void{
				_MainService.getSystemFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					_equipo = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_equipo = {};
				}
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay registros en la base de datos","Atención")
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);
					_dataList.selectedIndex = _dataIndex;
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
				}
				_dataReady = true;
				resetBooleans();
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}
			
			private function onDataPreDiagnosticSelect():void{
				if(_dataList.selectedIndex == -1) return;
				_DataDiagnostico.loadData(_dataList.selectedItem);
			}
			
			private function onDataSelect():void{
				if(_dataList.selectedIndex!=-1) {
					_DataDiagnostico.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem[_mainId];
				}
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				Catalogs.reload();
				getData();
			}
			
			private function onUpdateDiagnosticComplete(e:ResultEvent):void{
				_MainService.updateDiagnosticRecord.removeEventListener(ResultEvent.RESULT,onUpdateDiagnosticComplete);
				//Catalogs.reload(); No es necesario recargar todosss los catalogos
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				//Catalogs.reload(); No es necesario recargar todosss los catalogos
				getOrderData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				Catalogs.reload();
				getData();
			}
			
			//-------------------------------- ResultsEvents --------------------------------------	
			
			//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean = true):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{
				PopUpManager.removePopUp(e.target as TitleWindow);
				fillDiagnosticGrid();
			}
			//-------------------------------- POP UP WINDOW --------------------------------------
			
			//-------------------------------- Search Engine --------------------------------------
			/*
			private function searchFilter():void{
			_DataResult.filterFunction = vlidateSearch;
			_DataResult.refresh();
			}
			
			private function vlidateSearch(item:Object):Boolean{
			var isMatch:Boolean = false;           
			if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
			isMatch = true
			}              
			return isMatch;              
			}
			
			private function search():void{
			_searchFilter = _searchField.text;
			searchFilter();
			}
			private var _searchFilter:String 			= new String();
			[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Id",     	value:"_idArea"},{label:"Nombre",     	value:"_nombre"}]);
			*/
			//-------------------------------- Search Engine --------------------------------------					
			
		]]>
	</fx:Script>
	
	
	
	
	
</s:TitleWindow>