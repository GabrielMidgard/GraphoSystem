<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="1242" height="794" backgroundAlpha="1.0" contentBackgroundColor="#D5E7FB"
			   title="Cierre de Orden">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Label x="101" y="238" color="#767474" fontSize="10" fontStyle="italic" text="observaciones"/>
	<s:Label x="775" y="391" text="Fallas :" textAlign="left"/>
	<s:TextArea id="_nota" x="100" y="251" width="625" height="78" contentBackgroundColor="#e7e7e7"
				enabled="false"/>
	<s:Button label="Nuevo" width="80" enabled="{_dataReady&amp;&amp;_fallaSelected}" visible="false" y="338" x="1058"/>
	<s:Button label="Cancelar" width="80" enabled="{_dataReady}" visible="{_newData||_updateData}" click="cancelPrediagnostic();" y="338" x="1146"/>
	<s:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="false" y="338" x="1058"/>
	<s:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_fallaSelected}" visible="false" click="deleteDataAlert();" y="338" x="1146"/>
	<s:Button label="Actualizar" width="80" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}" visible="{_updateData&amp;&amp;!_newData}" click="updateFailureData();" y="338" x="1058"/>
	<s:Button label="Regresar" click="closeWindow();" width="145"  enabled="{!_newData}" y="714" x="1087"/>
	<s:TextInput id="_nombreEmpresa" x="99" y="61" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEmpresa}"/>
	<s:TextInput id="_ciudad" x="99" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._ciudad}"/>
	<s:TextInput id="_nombreEstado" x="259" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEstado}"/>
	<s:Label x="260" y="88" color="#767474" fontSize="10" fontStyle="italic" text="estado"/>
	<s:Label x="99" y="88" color="#767474" fontSize="10" fontStyle="italic" text="ciudad"/>
	<s:TextInput id="_telefonoCasa" x="417" y="61" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoCasa}"/>
	<s:TextInput id="_telefonoOficina" x="575" y="61" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoOficina}"/>
	<s:TextInput id="_mailSecundario" x="575" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailSecundario}"/>
	<s:TextInput id="_mailPrincipal" x="417" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailPrincipal}"/>
	<s:Label x="418" y="89" color="#767474" fontSize="10" fontStyle="italic" text="mails"/>
	<s:Label x="418" y="50" color="#767474" fontSize="10" fontStyle="italic" text="teléfonos"/>
	<s:Label x="48" y="67" text="Cliente :"/>
	<s:Label x="99" y="50" color="#767474" fontSize="10" fontStyle="italic" text="nombre"/>
	<s:TextInput id="_idOrden" x="98" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_fechaCreacion" x="174" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:Label x="176" y="10" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:TextInput id="_horaCreacion" x="250" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:Label x="252" y="10" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:Label x="328" y="9" color="#767474" fontSize="10" fontStyle="italic" text="estatus"/>
	<s:Label x="99" y="10" color="#767474" fontSize="10" fontStyle="italic" text="número"/>
	<s:Label x="65" y="26" fontWeight="bold" text="OS :"/>
	<s:Label x="415" y="9" color="#767474" fontSize="10" fontStyle="italic" text="área de soporte"/>
	<s:Label x="576" y="9" color="#767474" fontSize="10" fontStyle="italic" text="servicio"/>
	<s:TextInput id="_nombreContacto" x="99" y="139" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:TextInput id="_operador" x="99" y="172" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:Label x="35" y="178" text="Operador :"/>
	<s:Label x="99" y="128" color="#767474" fontSize="10" fontStyle="italic" text="reportó"/>
	<s:Label x="417" y="128" color="#767474" fontSize="10" fontStyle="italic" text="atendió"/>
	<s:TextInput id="_nombreEmpleado" x="417" y="139" width="308" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:TextInput id="_serie" x="575" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._serie}"/>
	<s:TextInput id="_modelo" x="417" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._modelo}"/>
	<s:Label x="418" y="201" color="#767474" fontSize="10" fontStyle="italic" text="modelo"/>
	<s:Label x="101" y="198" color="#767474" fontSize="10" fontStyle="italic" text="tipo"/>
	<s:Label x="261" y="199" color="#767474" fontSize="10" fontStyle="italic" text="marca"/>
	<s:Label x="576" y="201" color="#767474" fontSize="10" fontStyle="italic" text="no. serie"/>
	<s:Label x="48" y="216" text="Equipo :"/>
	<s:TextInput id="_nombreTipo" x="99" y="211" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreTipo}"/>
	<s:TextInput id="_nombreMarca" x="259" y="211" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreMarca}"/>
	<s:Label x="656" y="200" color="#767474" fontSize="10" fontStyle="italic" text="año de fab."/>
	<s:TextInput id="_anioFabricacion" x="655" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._anioFabricacion}"/>
	<s:TextInput id="_nombreAreaSoporte" x="416" y="21" width="151" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_nombreTipoServicio" x="575" y="21" width="150" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:DataGrid id="_listaFallas" x="824" y="382" width="402" height="324"
				contentBackgroundColor="#D5E7FB" dataProvider="{_fallasReportadas}" editable="false"
				enabled="{_dataReady&amp;&amp;!_updateData}"
				requestedRowCount="4" selectionChange="onFallaSelect();">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn width="80" dataField="_codigo" headerText="Código"></s:GridColumn>
				<s:GridColumn dataField="_fallaReal" headerText="Falla"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Button label="Actualizar" width="80" enabled="{_updateOrdenData&amp;&amp;!_newOrdenData}" visible="true" click="updateData();" y="714" x="100"/>
	<s:Button label="Cancelar" width="80" enabled="{_newOrdenData||_updateOrdenData}" visible="true" click="cancel();" y="714" x="188"/>
	<s:Label x="446" y="439" text="Fin Servicio :"/>
	<s:Label x="520" y="421" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:Label x="598" y="421" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:Button x="666" y="432" width="59" height="23" label="Ahora" click="getCurrentTime();"/>
	<s:TextInput id="_fechaFinServicio" x="520" y="432" width="70" change="dataChange();"
				 enabled="false" fontWeight="normal" textAlign="center"/>
	<s:TextInput id="_horaFinServicio" x="597" y="432" width="61" change="dataChange();"
				 enabled="false" fontWeight="normal" textAlign="center"/>
	<s:TextArea id="_reparacion" x="824" y="61" width="402" height="97"
				change="dataPreDiagnosticChange();" fontStyle="normal"/>
	<s:TextArea id="_observacionesAccServicio" x="100" y="349" width="625" height="67"
				change="dataChange();" enabled="false" fontStyle="normal"/>
	<s:TextArea id="_observacionesServicio" x="100" y="474" width="625" height="64"
				change="dataChange();" enabled="false" fontStyle="normal"/>
	<s:TextArea id="_observacionesClienteOrden" x="100" y="556" width="625" height="64"
				change="dataChange();" enabled="false" fontStyle="normal"/>
	<s:TextArea id="_interesCliente" x="100" y="640" width="625" height="64" change="dataChange();"
				enabled="false" fontStyle="normal"/>
	<s:Label x="49" y="640" text="Interés :"/>
	<s:Label x="100" y="627" color="#767474" fontSize="10" fontStyle="italic" text="del cliente por equipo"/>
	<s:Label x="5" y="563" text="Observaciones :"/>
	<s:Label x="100" y="543" color="#767474" fontSize="10" fontStyle="italic" text="del cliente en orden de servicio :"/>
	<s:Label x="0" y="481" text="Recomendación :"/>
	<s:Label x="100" y="461" color="#767474" fontSize="10" fontStyle="italic" text="del técnico:"/>
	<s:Label x="4" y="356" text="Observaciones :"/>
	<s:TextArea id="_referencia" x="823" y="178" width="402" height="56"
				change="dataPreDiagnosticChange();" fontStyle="normal"/>
	<s:TextArea id="_pruebas" x="823" y="254" width="402" height="75"
				change="dataPreDiagnosticChange();" fontStyle="normal"/>
	<s:Label x="735" y="260" text="Pruebas Falla :"/>
	<s:Label x="752" y="184" text="Referencia :"/>
	<s:TextInput id="_fallaReal" x="824" y="23" width="314" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="normal"/>
	<s:TextInput id="_codigo" x="1146" y="23" width="79" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontStyle="normal"/>
	<s:Label x="785" y="30" text="Falla :"/>
	<s:Label x="824" y="12" color="#767474" fontSize="10" fontStyle="italic" text="confimada"/>
	<s:Label x="1146" y="12" color="#767474" fontSize="10" fontStyle="italic" text="código"/>
	<s:Label x="748" y="68" text="Reparación :"/>
	<s:Label x="824" y="50" color="#767474" fontSize="10" fontStyle="italic" text="de falla"/>
	<s:Label x="824" y="166" color="#767474" fontSize="10" fontStyle="italic" text="de apoyo"/>
	<s:Label x="100" y="336" color="#767474" fontSize="10" fontStyle="italic" text="de acciones del servicio"/>
	<s:ComboBox id="_tiempoUnidadPruebas" x="155" y="432" width="75" change="dataChange();"
				dataProvider="{ConstantData.TiempoEstimado}" enabled="false" fontStyle="italic"> </s:ComboBox>
	<s:ComboBox id="_tiempoUnidadTotalServ" x="345" y="432" width="93" change="dataChange();"
				dataProvider="{ConstantData.TiempoEstimado}" enabled="false" fontStyle="italic"> </s:ComboBox>
	<s:TextInput id="_tiempoNumeroTotalServ" x="289" y="432" width="48" change="dataChange();"
				 enabled="false" fontStyle="normal" textAlign="center"/>
	<s:Label x="235" y="435" text="Tiempo :"/>
	<s:Label x="289" y="421" color="#767474" fontSize="10" fontStyle="italic" text="total servicio"/>
	<s:TextInput id="_tiempoNumeroPruebas" x="99" y="432" width="48" change="dataChange();"
				 enabled="false" fontStyle="normal" textAlign="center"/>
	<s:Label x="45" y="435" text="Tiempo :"/>
	<s:Label x="99" y="421" color="#767474" fontSize="10" fontStyle="italic" text="en pruebas"/>
	<s:ComboBox id="_idEstatus" x="327" y="20" width="81" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{SystemGlobals.ORDEN_ESTATUS}"
				fontWeight="bold" labelField="_nombreEstatus"></s:ComboBox>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.random.constants.Catalogs;
			import mx.random.constants.ConstantData;
			import mx.random.constants.Languages;
			import mx.random.constants.SystemGlobals;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.dataManagers.EventManager;
			import mx.random.forms.Validator;
			import mx.random.web.WebApplication;
			import mx.random.windowManagers.PopManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.StringUtil;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
			[Bindable]	private var _Data:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataFailure:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();
			[Bindable]	private var _DataDiagnosticoResult:ArrayCollection 		= new ArrayCollection();
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;
			[Bindable]	public var _fallaSelected:Boolean 		= false;
			
			[Bindable]	public var _newOrdenData				= false;
			[Bindable]	public var _dataOrdenReady				= false;
			[Bindable]	public var _updateOrdenData				= false;
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number 			= 0;
			private var _selectedName:String 		= "";
			private var _serviceName  				= "Ordenes";
			private var _mainId  					= "_idOrden";
			private var _mainFocusField:String      = "_operador";
			private var _idOrdenSelected:Number		= -1;
			[Bindable] private var _cliente:Object = {};
			[Bindable] private var _equipo:Object = {};
			[Bindable] private var _fallasReportadas:ArrayCollection = new ArrayCollection();
			[Bindable] private var _prediagnosticos:ArrayCollection = new ArrayCollection();
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				initView();
			}
			
			public function set idOrden(value:Number):void{
				_idOrdenSelected = value;
			}
			
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				
				//----------- Validaciones ---------------------------
				//Valid.addStringVal(_nombre,2,100,"Nombre");
				//Valid.addStringVal(_codigo,1,2,"Código");
				
				//----------- Validaciones ---------------------------
				
				
				Valid.validateOnChange = true;
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}
			
			private function extraCreateData(params:Object):Object{				
				//params["_newsImage"] = _image;
				return params;
			}
			
			private function createRecordExtras():void{
				//_image = "defaultNew.jpg";
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_color'] = areaColor.selectedColor;			
				return params;
			}
			
			private function loadExtraFields(params:Object):void{				
				//_image = params["_newsImage"];
			}
			
			private function forceImports():void{
				
			}
			
			private function concatenateName(value:Object):String
			{
				var nombre:String = "";
				if(value._nombre != null && value._nombre != undefined){
					nombre += StringUtil.trim(value._nombre) + " ";
				}
				if(value._paterno != null && value._paterno != undefined){
					nombre += StringUtil.trim(value._paterno) + " ";
				}
				if(value._materno != null && value._materno != undefined){
					nombre += StringUtil.trim(value._materno) + " ";
				}
				return nombre;
			}
			
			public function initView():void{
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = ["_creado","_modificado","_creadoPor","_creado",	"_modificado","_creadoPor",
					"_modificadoPor","_descripcionClienteFalla","_idCodigoError","_idCliente","_idContacto",
					"_idTipoServicio","_idAreaSoporteTecnico","_idEmpleado","_idCliente","_idContacto",
					"_idEquipo","_fechaHabloCon","_idEquipo","_nombreTecnico","_idRefaccion",
					"_importe","_totalRemisionar","_noRemision","_responsableAsignacionDeFecha",
					"_domicilioServicio","_fechaServicioInicial","_formaPago","_fechaPagoInicial",
					"_tecnicoAsignado","_seInformoVisitaA","_fechaPromesaVisita",
					"_nombreTecnicoAsignado","_totalFacturar","_noFactura",
					"_idTecnico","_habloCon","_fechaHablo","_horaHablo","_prediagnosticoNumeroTiempo","_prediagnosticoUnidadTiempo",
					"_servicioNumeroTiempo","_servicioUnidadTiempo",
					"_cantidadInicial","_responsableCotizacion",
					"_tipoCambio","_fechaCotizacion","_fechaPreCotizacion","_cantidadInicial","_responsableCotizacion","_responsablePreCotizacion",
					"_tipoTransporte","_costoManoObra","_costoRefaccion","_costoTransporte","_costoHotel","_costoComidas","_costoFleteSobreEquipaje",
					"_costoGastosDiversos","_observacionesCotDiag","_cantidadComplemento","_importePagoInicial","_fechaPrePagoInicial",
					"_idTecnicoDiagnostico","_tiempoUnidadDiagnostico","_tiempoNumeroDiagnostico",
					"_preImporte","_fechaPagoInicial","_diasReparacion",
					"_tieneServicio","_tienePrediagnostico","_tieneCotizacionPrediagnostico","_tieneVentaPrediagnostico","_tieneConfirmacion",
					"_tieneDiagnostico","_tieneCotizacionDiagnostico","_tieneVentaDiagnostico",
					"_fechaDepositoVta","_importeDepositoVta","_formaPagoVta","_observacionesComplVta","_observacionesFacVta",
					"_fechaServInicial","_horaServInicial","_finServicio","_nombreEstatus"
				];
				_DataFailure.exceptions = ["_idOrdenFalla","_idOrden","_falla","_creado","_modificado","_creadoPor","_modificadoPor","_idFamiliaFalla"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				
				//_searchType.selectedIndex = 1;
			}
			
			public function imageUploadReady(data:Object):void{
				
			}
			
			// ------------------- View Extra Data -------------------------------
			
			
			private function initData():void{
				_MainService.getFields();
				_MainService.getFailureFields();
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_MainService.getFailureFields.addEventListener(ResultEvent.RESULT,onGetFailureFieldsResult);
				_dataReady = false;
				_dataOrdenReady = false;
			}
			
			public function closeWindow():void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			
			private function updateData():void{
				if(Valid.validateAll()){
					_dataOrdenReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					var dDate:String = _fechaFinServicio.text + " " + _horaFinServicio.text;
					params._finServicio = dDate;
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function updateFailureData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraUpdateData(_DataFailure.makeData());
					if(_listaFallas.selectedIndex!=-1){
						params["_idOrdenFalla"] = _listaFallas.selectedItem["_idOrdenFalla"];
						_MainService.updateFailureRecord(params);
						_MainService.updateFailureRecord.addEventListener(ResultEvent.RESULT,onUpdateFailureComplete);	
					}
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function deleteDataAlert():void{
				/*if(_listaPrediagnostico.selectedIndex!=-1){
				Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
				Alert.show("No hay registro selecionado","Error");
				}*/
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					_MainService.deleteDiagnosticRecord(params);
					_MainService.deleteDiagnosticRecord.addEventListener(ResultEvent.RESULT,onDeleteDiagnosticComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				resetBooleans();
				getData();
				Valid.validateAll();
			}
			private function cancelPrediagnostic():void{
				resetFailureBooleans();
				Valid.validateAll();
			}
			private function resetBooleans():void{
				_newOrdenData = false;
				_updateOrdenData = false;
			}
			private function resetFailureBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			private function dataPreDiagnosticChange():void{
				_updateData = true;
			}
			
			private function dataChange():void{
				_updateOrdenData = true;
			}
			
			private function onFallaSelect():void{
				if(_listaFallas.selectedIndex!=-1) {
				}else{
					if(_fallasReportadas.length > 0){
						_listaFallas.selectedIndex = 0;
					}else{
						return;
					}
					
				}
				_listaFallas.setSelectedIndex(_listaFallas.selectedIndex);
				_DataFailure.loadData(_listaFallas.selectedItem);
				_fallaSelected = true;
			}
			
			private function getCurrentTime():void{
				var currentDateTime:Date = new Date();
				_fechaFinServicio.text = currentDateTime.fullYear + "-" + (currentDateTime.month+1) + "-" + currentDateTime.date;
				_horaFinServicio.text = currentDateTime.hours + ":" + currentDateTime.minutes + ":" + currentDateTime.seconds;
				dataChange();
			}
			
			private function openImageEditor():void{
				/*if(_dataList.selectedIndex!=-1){
				//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
				openPopUp("managers.ImageManager")
				}else{
				Alert.show("No hay registro selecionado","Error");
				}*/
			}
			//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataOrdenReady = false;
				}
				_DataResult= new ArrayCollection();
			}
			
			private function onGetFailureFieldsResult(e:ResultEvent):void{
				_MainService.getFailureFields.removeEventListener(ResultEvent.RESULT,onGetFailureFieldsResult);
				if(e){
					if(e.result) {
						_DataFailure.createFields(Converter.arrayConverter(e.result));
						getFailureData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataDiagnosticoResult= new ArrayCollection();
			}
			
			private function getFailureData():void{
				_MainService.getFailuresFromOrder(_idOrdenSelected);
				_MainService.getFailuresFromOrder.addEventListener(ResultEvent.RESULT,onGetFailuresOrderResult);
				_dataReady = true;
				resetFailureBooleans();
			}
			
			private function getData():void{
				_MainService.getClientFromOrder(_idOrdenSelected);
				_MainService.getSpecificOrder(_idOrdenSelected);
				_MainService.getEquipmentFromOrder(_idOrdenSelected);
				_MainService.getSpecificOrder.addEventListener(ResultEvent.RESULT,onGetOrderResult);
				_MainService.getClientFromOrder.addEventListener(ResultEvent.RESULT,onGetDataClientResult);
				_MainService.getEquipmentFromOrder.addEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				resetBooleans();
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				//Catalogs.reload();
				getData();
			}
			
			private function onUpdateFailureComplete(e:ResultEvent):void{
				_MainService.updateFailureRecord.removeEventListener(ResultEvent.RESULT,onUpdateFailureComplete);
				getFailureData();
			}
			
			private function onDeleteDiagnosticComplete(e:ResultEvent):void{
				_MainService.deleteDiagnosticRecord.removeEventListener(ResultEvent.RESULT,onDeleteDiagnosticComplete);
				_dataIndex = _DataResult.length-2;
				onFallaSelect();
			}
			
			//-------------------------------- ResultsEvents --------------------------------------	
			private function onGetOrderResult(e:ResultEvent):void{
				_MainService.getSpecificOrder.removeEventListener(ResultEvent.RESULT,onGetOrderResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No existe orden con el id especificado","Atención")
				}else{
					_Data.loadData(_DataResult[0]); //Sólo debe de haber un registro o ninguno
				}
				_dataOrdenReady = true;				
			}
			
			public function onGetFailuresOrderResult(e:ResultEvent):void{
				_MainService.getFailuresFromOrder.removeEventListener(ResultEvent.RESULT,onGetFailuresOrderResult);
				_fallasReportadas = Converter.arrayConverter(e.result);
				onFallaSelect();
			}
			
			private function onGetDataSystemResult(e:ResultEvent):void{
				_MainService.getSystemFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					_equipo = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_equipo = {};
				}
			}
			//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean = true):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function onGetDataClientResult(e:ResultEvent):void{
				_MainService.getClientFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataClientResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					resArr[0]._nombreEstado = ConstantData.NationalStates[Number(resArr[0]._estado)].label;
					_cliente = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_cliente = {};
				}
			}
			
			private function closePopup(e:CloseEvent):void{
				PopUpManager.removePopUp(e.target as TitleWindow);
			}
			//-------------------------------- POP UP WINDOW --------------------------------------
			
			//-------------------------------- Search Engine --------------------------------------
			/*
			private function searchFilter():void{
			_DataResult.filterFunction = vlidateSearch;
			_DataResult.refresh();
			}
			
			private function vlidateSearch(item:Object):Boolean{
			var isMatch:Boolean = false;           
			if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
			isMatch = true
			}              
			return isMatch;              
			}
			
			private function search():void{
			_searchFilter = _searchField.text;
			searchFilter();
			}
			private var _searchFilter:String 			= new String();
			[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Id",     	value:"_idArea"},{label:"Nombre",     	value:"_nombre"}]);
			*/
			//-------------------------------- Search Engine --------------------------------------					
			
		]]>
	</fx:Script>
	
	
	
	
</s:TitleWindow>