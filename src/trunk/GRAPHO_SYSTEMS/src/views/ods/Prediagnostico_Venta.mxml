<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="1228" height="582" backgroundAlpha="1.0" contentBackgroundColor="#D5FBDB"
			   title="Venta de Prediagnostico">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	
	<s:ComboBox x="92" y="258" width="310" id="_idEmpleado" labelField="_nombre"  dataProvider="{SystemGlobals.EMPLEADOS}" change="dataChange();" tabIndex="1"/>
											    
	<s:Label x="7" y="263" text="Responsable :"/>
	<s:Label x="23" y="298" text="Hablo con :"/>
	<s:Label x="15" y="328" text="Comentario :"/>
	<s:Label x="10" y="414" width="70" text="Acción a &#xd;Seguir :" textAlign="right"/>
	<s:TextArea id="_accionSeguir" x="89" y="411" width="625" height="78" change="dataChange();"/>
	<s:Label x="409" y="280" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:Label x="488" y="280" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:TextArea id="_comentario" x="89" y="321" width="625" height="78" change="dataChange();"/>
	<s:Button label="Regresar" click="closeWindow();" width="145"  enabled="{!_newData}" y="499" x="1073"/>
	<s:Button x="568" y="290" width="70" height="23" label="Ahora" click="getCurrentTime();"
			  enabled="{_newData||_updateData}"/>
	
	<s:ComboBox 	x="821" id="_searchType" 	dataProvider="{_searchTypes}" 	width="92" y="19" />
	<s:TextInput 	x="921" id="_searchField" 	change="search();" 		width="296" enabled="{!_newData}" y="19"/>
	<s:Label x="754" text="Filtrar por :" textAlign="right" y="26"/>

	
	<s:DataGrid id="_dataList" x="736" y="49" width="482" height="440"
				dataProvider="{_ventaPrediagnosticos}" selectionChange="onDataPreDiagnosticSellResponsibleSelect();"
				enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;!_updateData}"
				 selectionMode="singleRow">
		<s:columns>	
			<s:ArrayList>
				<s:GridColumn headerText="Hablo con" dataField="_habloCon" ></s:GridColumn>		
				<s:GridColumn headerText="Comentario" dataField="_comentario"></s:GridColumn>
				<s:GridColumn headerText="Accion aSeguir" dataField="_accionSeguir" ></s:GridColumn>	
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	
	
	<s:TextInput id="_nombreEmpresa" x="92" y="61" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEmpresa}"/>
	<s:TextInput id="_ciudad" x="92" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._ciudad}"/>
	<s:TextInput id="_nombreEstado" x="252" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEstado}"/>
	<s:Label x="253" y="88" color="#767474" fontSize="10" fontStyle="italic" text="estado"/>
	<s:Label x="92" y="88" color="#767474" fontSize="10" fontStyle="italic" text="ciudad"/>
	<s:TextInput id="_telefonoCasa" x="410" y="61" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoCasa}"/>
	<s:TextInput id="_telefonoOficina" x="568" y="61" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoOficina}"/>
	<s:TextInput id="_mailSecundario" x="568" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailSecundario}"/>
	<s:TextInput id="_mailPrincipal" x="410" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailPrincipal}"/>
	<s:Label x="411" y="89" color="#767474" fontSize="10" fontStyle="italic" text="mails"/>
	<s:Label x="411" y="50" color="#767474" fontSize="10" fontStyle="italic" text="teléfonos"/>
	<s:Label x="41" y="67" text="Cliente :"/>
	<s:Label x="92" y="50" color="#767474" fontSize="10" fontStyle="italic" text="nombre"/>
	<s:TextInput id="_idOrden" x="91" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_fechaCreacion" x="167" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:Label x="169" y="10" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:TextInput id="_horaCreacion" x="243" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_nombreEstatus" x="321" y="21" width="79" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:Label x="245" y="10" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:Label x="321" y="9" color="#767474" fontSize="10" fontStyle="italic" text="estatus"/>
	<s:Label x="92" y="10" color="#767474" fontSize="10" fontStyle="italic" text="número"/>
	<s:Label x="58" y="26" fontWeight="bold" text="OS :"/>
	<s:Label x="408" y="9" color="#767474" fontSize="10" fontStyle="italic" text="área de soporte"/>
	<s:Label x="569" y="9" color="#767474" fontSize="10" fontStyle="italic" text="servicio"/>
	<s:TextInput id="_nombreContacto" x="92" y="139" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:TextInput id="_operador" x="92" y="172" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:Label x="28" y="178" text="Operador :"/>
	<s:Label x="92" y="128" color="#767474" fontSize="10" fontStyle="italic" text="reporto"/>
	<s:Label x="410" y="128" color="#767474" fontSize="10" fontStyle="italic" text="atendio"/>
	<s:TextInput id="_nombreEmpleado" x="410" y="139" width="308" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:TextInput id="_serie" x="568" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._serie}"/>
	<s:TextInput id="_modelo" x="410" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._modelo}"/>
	<s:Label x="411" y="201" color="#767474" fontSize="10" fontStyle="italic" text="modelo"/>
	<s:Label x="94" y="198" color="#767474" fontSize="10" fontStyle="italic" text="tipo"/>
	<s:Label x="254" y="199" color="#767474" fontSize="10" fontStyle="italic" text="marca"/>
	<s:Label x="569" y="201" color="#767474" fontSize="10" fontStyle="italic" text="no. serie"/>
	<s:Label x="41" y="216" text="Equipo :"/>
	<s:TextInput id="_nombreTipo" x="92" y="211" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreTipo}"/>
	<s:TextInput id="_nombreMarca" x="252" y="211" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreMarca}"/>
	<s:Label x="649" y="200" color="#767474" fontSize="10" fontStyle="italic" text="año de fab."/>
	<s:TextInput id="_anioFabricacion" x="648" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._anioFabricacion}"/>
	<s:TextInput id="_nombreAreaSoporte" x="409" y="21" width="151" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_nombreTipoServicio" x="568" y="21" width="150" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_habloCon" x="92" y="291" width="310" change="dataChange();" fontStyle="normal"
				 text="{_datosVentaPrediagnostico._habloCon}"/>
	<s:TextInput id="_fechaHablo" x="411" y="291" width="70" change="dataChange();"
				 fontWeight="normal" text="{_datosVentaPrediagnostico._fechaHablo}" textAlign="center"/>
	<s:TextInput id="_horaHablo" x="490" y="291" width="70" change="dataChange();"
				 fontWeight="normal" text="{_datosVentaPrediagnostico._horaHablo}" textAlign="center"/>
	
		
	<s:Button label="Nuevo" width="80" enabled="{_dataReady}" visible="{!_newData&amp;&amp;!_updateData}" click="newVentaPreDiagnosticData();" y="497" x="89"/>
	<s:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="{_newData}" click="createPreDiagnosticSellResponsibleData();" y="497" x="89"/>

	<s:Button label="Actualizar" width="80" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}"  visible="{_updateData&amp;&amp;!_newData}" click="updateData();" y="497" x="89"/>
	<s:Button label="Cancelar" width="80" enabled="{_dataReady}" visible="{_newData||_updateData}" click="cancelPreDiagnosticSellResponsible();" y="497" x="177"/>
	<s:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData}" visible="{!_newData&amp;&amp;!_updateData}" click="deleteDataAlert();" y="497" x="177"/>
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.random.constants.Catalogs;
			import mx.random.constants.Languages;
			import mx.random.constants.SystemGlobals;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.dataManagers.EventManager;
			import mx.random.forms.Validator;
			import mx.random.web.WebApplication;
			import mx.random.windowManagers.PopManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.random.constants.ConstantData;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
			[Bindable]	private var _Data:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataPreDiagnosticoRes:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();	
			[Bindable]  private var _ventaPrediagnosticos:ArrayCollection = new ArrayCollection();
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;
			
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number 			= 0;
			private var _selectedName:String 		= "";
			private var _idOrdenSelected:Number		= -1;
			private var _serviceName  				= "Ordenes";
			private var _mainId  					= "_idDiagnostico";
			private var _mainFocusField:String      = "_operador";
			[Bindable] private var _cliente:Object = {};
			[Bindable] private var _equipo:Object = {};
			[Bindable] private var _cotizacion:Object = {};
			[Bindable] private var _datosVentaPrediagnostico:Object = {};
			[Bindable] private var _prediagnosticos:ArrayCollection = new ArrayCollection();
			
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				initView();	
			}
			
			public function set idOrden(value:Number):void{
				_idOrdenSelected = value;
			}
			
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				
				Valid.addStringVal(_habloCon,1,50,"Hablo Con");
				Valid.addStringVal(_fechaHablo,4,30,"Fecha");
				Valid.addStringVal(_horaHablo,4,30,"Hora");
			
				
				//----------- Validaciones ---------------------------
				//Valid.addStringVal(_nombre,2,100,"Nombre");
				//Valid.addStringVal(_codigo,1,2,"Código");
				
				//----------- Validaciones ---------------------------
				
				
				Valid.validateOnChange = true;
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}
			
			private function extraCreateData(params:Object):Object{				
				//params["_newsImage"] = _image;
				return params;
			}
			
			private function createRecordExtras():void{
				//_image = "defaultNew.jpg";
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_color'] = areaColor.selectedColor;			
				return params;
			}
			
			private function loadExtraFields(params:Object):void{				
				//_image = params["_newsImage"];
			}
			
			private function forceImports():void{
				
			}
			
			public function initView():void{
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = _Data.exceptions = ["_creado","_modificado","_creadoPor","_creado",	"_modificado","_creadoPor",
					"_modificadoPor","_descripcionClienteFalla","_idCodigoError","_idCliente","_idContacto",
					"_idTipoServicio","_idAreaSoporteTecnico","_idEstatus","_idEmpleado","_idCliente","_idContacto","_idEquipo","_fechaHabloCon",
					"_idEquipo","_nota"];
				_DataPreDiagnosticoRes.exceptions = ["_idVentaPrediagnosticoResponsable","_creado","_fechaHabloCon","_idOrden"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				
				//_searchType.selectedIndex = 1;
			}
			
			public function imageUploadReady(data:Object):void{
				
			}
			
			// ------------------- View Extra Data -------------------------------
			
			
			private function initData():void{
				_MainService.getFields();
				_MainService.getPreDiagnosticSellResponsibleFields();
				_MainService.getPreDiagnosticSellResponsibleFields.addEventListener(ResultEvent.RESULT,onGetPreDiagnosticSellResponsibleFieldsResult);
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;
				Valid.validateAll();
				this[_mainFocusField].setFocus();
				createRecordExtras();
			}
			
		
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deletePreDiagnosticSellResponsibleData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			
			private function cancel():void{
				onDataPreDiagnosticSellResponsibleSelect();
				resetBooleans();
				Valid.validateAll();
			}
			
			private function getData():void{
				_MainService.getClientFromOrder(_idOrdenSelected);
				_MainService.getSpecificOrder(_idOrdenSelected);
				_MainService.getEquipmentFromOrder(_idOrdenSelected);
				
				_MainService.getPreDiagnosticSellResponsibleData(_idOrdenSelected);
				
				_MainService.getSpecificOrder.addEventListener(ResultEvent.RESULT,onGetOrderResult);
				_MainService.getClientFromOrder.addEventListener(ResultEvent.RESULT,onGetDataClientResult);
				_MainService.getEquipmentFromOrder.addEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				
				_MainService.getPreDiagnosticSellResponsibleData.addEventListener(ResultEvent.RESULT,onGetPreDiagnosticSellResponsibleResult);
				resetBooleans();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			private function dataChange():void{
				_updateData = true;
			}
			
			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
			}
			
			private function onGetPreDiagnosticSellResponsibleFieldsResult(e:ResultEvent):void{
				_MainService.getPreDiagnosticSellResponsibleFields.removeEventListener(ResultEvent.RESULT,onGetPreDiagnosticSellResponsibleFieldsResult);
				if(e){
					if(e.result) {
						_DataPreDiagnosticoRes.createFields(Converter.arrayConverter(e.result));
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
			}
			
			private function onGetDataClientResult(e:ResultEvent):void{
				_MainService.getClientFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataClientResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					resArr[0]._nombreEstado = ConstantData.NationalStates[Number(resArr[0]._estado)].label;
					_cliente = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_cliente = {};
				}
			}
			
			
			private function onGetOrderResult(e:ResultEvent):void{
				_MainService.getSpecificOrder.removeEventListener(ResultEvent.RESULT,onGetOrderResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No existe orden con el id especificado","Atención")
				}else{
					_Data.loadData(_DataResult[0]); //Sólo debe de haber un registro o ninguno
				}
				_dataReady = true;				
			}
			
			private function onGetDataSystemResult(e:ResultEvent):void{
				_MainService.getSystemFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					_equipo = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_equipo = {};
				}
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay registros en la base de datos","Atención")
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);
				/*	_dataList.selectedIndex = _dataIndex;
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					_dataList.setSelectedIndex(_dataList.selectedIndex);*/
					loadExtraFields(_DataResult[_dataIndex]);
				}
				_dataReady = true;
				resetBooleans();
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}
			
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				Catalogs.reload();
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updatePreDiagnosticSellResponsibleRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				//Catalogs.reload(); No es necesario recargar todosss los catalogos
				getData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				Catalogs.reload();
				getData();
			}
			
			//-------------------------------- ResultsEvents --------------------------------------	
			
			//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean = true):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{
				PopUpManager.removePopUp(e.target as TitleWindow);
			}
			//-------------------------------- POP UP WINDOW --------------------------------------
			
			//-------------------------------- Search Engine --------------------------------------
			
			private function searchFilter():void{
				_ventaPrediagnosticos.filterFunction = vlidateSearch;
				_ventaPrediagnosticos.refresh();
			}
			
			private function vlidateSearch(item:Object):Boolean{
			var isMatch:Boolean = false;           
			if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
			isMatch = true
			}              
			return isMatch;              
			}
			
			private function search():void{
				_searchFilter = _searchField.text;
				searchFilter();
			}
			private var _searchFilter:String 			= new String();
			[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Hablo Con",     	value:"_habloCon"},{label:"Encargado",     	value:"_idEmpleado"},{label:"fecha",     	value:"_fechaHabloCon"}]);
			
			//-------------------------------- Search Engine --------------------------------------					
			
			private function getCurrentTime():void{
				var currentDateTime:Date = new Date();
				_fechaHablo.text = currentDateTime.fullYear + "-" + currentDateTime.month + "-" + currentDateTime.date;
				_horaHablo.text = currentDateTime.hours + ":" + currentDateTime.minutes + ":" + currentDateTime.seconds;
				dataChange();
			}
			
			private function createPreDiagnosticSellResponsibleData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_DataPreDiagnosticoRes.makeData());
					var dDate:String = _fechaHablo.text + " " + _horaHablo.text;
					params._fechaHabloCon = dDate;
					
					params["_idOrden"] = _idOrdenSelected;
					_MainService.createPreDiagnosticSellResponsibleRecord(params);
					_MainService.createPreDiagnosticSellResponsibleRecord.addEventListener(ResultEvent.RESULT,onCreatePreDiagnosticSellResponsibleComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			
			private function onCreatePreDiagnosticSellResponsibleComplete(e:ResultEvent):void{				
				_MainService.recordPreDiagnostic.removeEventListener(ResultEvent.RESULT,onCreatePreDiagnosticSellResponsibleComplete);
				resetVentaPreDiagnosticBooleans();
				_dataReady = true;
				//Catalogs.reload();
				getData();
			}
			
			private function cancelPreDiagnosticSellResponsible():void{
				resetVentaPreDiagnosticBooleans();
				onDataPreDiagnosticSellResponsibleSelect();
				Valid.validateAll();
			}
			
			private function resetVentaPreDiagnosticBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			
			private function updateData():void{
				if(Valid.validateAll()){
					var params:Object = extraUpdateData(_DataPreDiagnosticoRes.makeData());
					var dDate:String = _fechaHablo.text + " " + _horaHablo.text;
					params["_idVentaPrediagnosticoResponsable"] = _dataList.selectedItem["_idVentaPrediagnosticoResponsable"];
					params._fechaHabloCon = dDate;
					_MainService.updatePreDiagnosticSellResponsibleRecord(params);
					_MainService.updatePreDiagnosticSellResponsibleRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
		
			
			private function newVentaPreDiagnosticData():void{
				_DataPreDiagnosticoRes.clear();
				_newData = true;
				_updateData = false;
				Valid.validateAll();
				this["_habloCon"].setFocus();
				createRecordExtras();
			}
			
			public function onGetPreDiagnosticSellResponsibleResult(e:ResultEvent):void{
				_MainService.getPreDiagnosticSellResponsibleData.removeEventListener(ResultEvent.RESULT,onGetPreDiagnosticSellResponsibleResult);
				_ventaPrediagnosticos = Converter.arrayConverter(e.result);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					_datosVentaPrediagnostico = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_datosVentaPrediagnostico = {};
				}
				
				if(_ventaPrediagnosticos.length > 0){
					if(_dataIndex<0) _dataIndex = 0;
					_dataList.selectedIndex = _dataIndex;	
					_DataPreDiagnosticoRes.loadData(_dataList.selectedItem);
					
				}
			}
			
			private function onDataPreDiagnosticSellResponsibleSelect():void{
				if(_dataList.selectedIndex!=-1) {
					_DataPreDiagnosticoRes.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem["_idVentaPrediagnosticoResponsable"];
				}
			}
			
			private function deletePreDiagnosticSellResponsibleData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params["_idVentaPrediagnosticoResponsable"] = _dataList.selectedItem["_idVentaPrediagnosticoResponsable"];
					_MainService.deletePreDiagnosticSellResponsibleRecord(params);
					_MainService.deletePreDiagnosticSellResponsibleRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
		]]>
	</fx:Script>
	
	
	
	
	
</s:TitleWindow>
