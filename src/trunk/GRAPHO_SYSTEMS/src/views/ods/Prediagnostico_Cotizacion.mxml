<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="1334" height="694" backgroundAlpha="1.0" contentBackgroundColor="#D5E7FB"
			   title="Cotización Prediagnostico">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:TextInput id="_nombreTecnico" x="113" y="244" width="310" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontStyle="italic" text="{_datosPrediagnostico._nombreTecnico}"/>
	<s:Label x="58" y="250" text="Técnico :"/>
	<s:TextInput id="_habloCon" x="113" y="278" width="310" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontStyle="normal" text="{_datosPrediagnostico._habloCon}"/>
	<s:Label x="47" y="285" text="Hablo con :"/>
	<s:TextInput id="_fechaHablo" x="432" y="278" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="normal" text="{_datosPrediagnostico._fechaHablo}" textAlign="center"/>
	<s:Label x="433" y="267" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:TextInput id="_horaHablo" x="511" y="278" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="normal" text="{_datosPrediagnostico._horaHablo}" textAlign="center"/>
	<s:Label x="512" y="267" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:Button label="Nuevo" width="80" enabled="{_dataReady}" visible="false" click="newData();" y="598" x="765"/>
	<s:Button label="Cancelar" width="80" enabled="{_dataReady}" visible="{_newData||_updateData}" click="cancel();" y="598" x="897"/>
	<s:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="{_newData}" click="createData();" y="598" x="765"/>
	<s:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData}" visible="false" click="deleteDataAlert();" y="598" x="897"/>
	<s:Button label="Actualizar" width="121" enabled="{_dataReady&amp;&amp;_updateData}" visible="true" click="updateData();" y="598" x="765"/>
	<s:Button label="Regresar" click="closeWindow();" width="145"  enabled="{!_newData}" y="598" x="1165"/>
	<s:TextInput id="_costoManoObra" x="984" y="524" width="130" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal"/>
	<s:Label x="112" y="305" color="#767474" fontSize="10" fontStyle="italic" text="necesario"/>
	<s:Label x="114" y="505" color="#767474" fontSize="10" fontStyle="italic" text="solicitada"/>
	<s:TextInput id="_costoRefaccion" x="1189" y="524" width="121" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" enabled="false" fontStyle="normal"/>
	<s:TextInput id="_viaticoTotal" x="765" y="524" width="121" contentBackgroundColor="#D5FBDB"
				 enabled="false" fontStyle="normal"
				 text="{Math.round((Number(_costoTransporte.text)+Number(_costoHotel.text)+Number(_costoComidas.text)+Number(_costoFleteSobreEquipaje.text)+Number(_costoGastosDiversos.text))*100)/100}"/>
	<s:TextInput id="_costoTransporte" x="765" y="401" width="121" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal"/>
	<s:Label x="693" y="408" text="Transporte :"/>
	<s:Label x="765" y="390" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:TextInput id="_costoGastosDiversos" x="983" y="474" width="131" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal"/>
	<s:Label x="931" y="481" text="Gastos :"/>
	<s:Label x="984" y="464" color="#767474" fontSize="10" fontStyle="italic" text="diversos"/>
	<s:Label x="709" y="531" text="Viáticos :"/>
	<s:Label x="1122" y="531" text="Refacción :"/>
	<s:Label x="895" y="530" text="Mano de Obra :"/>
	<s:Label x="765" y="513" color="#767474" fontSize="10" fontStyle="italic" text="costo total"/>
	<s:Label x="1196" y="513" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:TextInput id="_nombreEmpresa0" x="765" y="568" width="122" contentBackgroundColor="#D5FBDB"
				 enabled="false" fontStyle="normal"
				 text="{Math.round((Number(_viaticoTotal.text)+Number(_costoManoObra.text)+Number(_costoRefaccion.text))*100)/100}"/>
	<s:Label x="725" y="575" text="Total :"/>
	<s:Label x="764" y="556" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:Label x="984" y="513" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:TextInput id="_costoHotel" x="765" y="438" width="121" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal"/>
	<s:Label x="723" y="445" text="Hotel :"/>
	<s:Label x="765" y="427" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:TextInput id="_costoFleteSobreEquipaje" x="983" y="438" width="131" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal"/>
	<s:Label x="944" y="445" text="Flete :"/>
	<s:Label x="947" y="407" text="Tipo :"/>
	<s:Label x="983" y="428" color="#767474" fontSize="10" fontStyle="italic" text="y sobre equipaje"/>
	<s:TextInput id="_costoComidas" x="765" y="476" width="122" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" fontStyle="normal"/>
	<s:Label x="701" y="483" text="Comidas :"/>
	<s:Label x="765" y="465" color="#767474" fontSize="10" fontStyle="italic" text="costo"/>
	<s:Label x="984" y="390" color="#767474" fontSize="10" fontStyle="italic" text="transporte"/>

	<s:ComboBox id="_tipoTransporte" x="982" y="401" width="132" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{ConstantData.TipoTransporte}" labelField="label"
				fontWeight="bold"></s:ComboBox>
	<s:TextInput id="_nombreEmpresa" x="112" y="61" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEmpresa}"/>
	<s:TextInput id="_ciudad" x="112" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._ciudad}"/>
	<s:TextInput id="_nombreEstado" x="272" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._nombreEstado}"/>
	<s:Label x="273" y="88" color="#767474" fontSize="10" fontStyle="italic" text="estado"/>
	<s:Label x="112" y="88" color="#767474" fontSize="10" fontStyle="italic" text="ciudad"/>
	<s:TextInput id="_telefonoCasa" x="430" y="61" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoCasa}"/>
	<s:TextInput id="_telefonoOficina" x="588" y="61" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._telefonoOficina}"/>
	<s:TextInput id="_mailSecundario" x="588" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailSecundario}"/>
	<s:TextInput id="_mailPrincipal" x="430" y="99" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_cliente._mailPrincipal}"/>
	<s:Label x="431" y="89" color="#767474" fontSize="10" fontStyle="italic" text="mails"/>
	<s:Label x="431" y="50" color="#767474" fontSize="10" fontStyle="italic" text="teléfonos"/>
	<s:Label x="61" y="67" text="Cliente :"/>
	<s:Label x="112" y="50" color="#767474" fontSize="10" fontStyle="italic" text="nombre"/>
	<s:TextInput id="_idOrden" x="111" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_fechaCreacion" x="187" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:Label x="189" y="10" color="#767474" fontSize="10" fontStyle="italic" text="fecha"/>
	<s:TextInput id="_horaCreacion" x="263" y="21" width="70" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_nombreEstatus" x="341" y="21" width="79" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:Label x="265" y="10" color="#767474" fontSize="10" fontStyle="italic" text="hora"/>
	<s:Label x="341" y="9" color="#767474" fontSize="10" fontStyle="italic" text="estatus"/>
	<s:Label x="112" y="10" color="#767474" fontSize="10" fontStyle="italic" text="número"/>
	<s:Label x="78" y="26" fontWeight="bold" text="OS :"/>
	<s:Label x="428" y="9" color="#767474" fontSize="10" fontStyle="italic" text="área de soporte"/>
	<s:Label x="589" y="9" color="#767474" fontSize="10" fontStyle="italic" text="servicio"/>
	<s:TextInput id="_nombreContacto" x="112" y="139" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:TextInput id="_operador" x="112" y="172" width="310" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:Label x="48" y="178" text="Operador :"/>
	<s:Label x="112" y="128" color="#767474" fontSize="10" fontStyle="italic" text="reporto"/>
	<s:Label x="430" y="128" color="#767474" fontSize="10" fontStyle="italic" text="atendio"/>
	<s:TextInput id="_nombreEmpleado" x="430" y="139" width="308" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic"/>
	<s:TextInput id="_serie" x="588" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._serie}"/>
	<s:TextInput id="_modelo" x="430" y="212" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._modelo}"/>
	<s:Label x="431" y="201" color="#767474" fontSize="10" fontStyle="italic" text="modelo"/>
	<s:Label x="114" y="198" color="#767474" fontSize="10" fontStyle="italic" text="tipo"/>
	<s:Label x="274" y="199" color="#767474" fontSize="10" fontStyle="italic" text="marca"/>
	<s:Label x="589" y="201" color="#767474" fontSize="10" fontStyle="italic" text="no. serie"/>
	<s:Label x="61" y="216" text="Equipo :"/>
	<s:TextInput id="_nombreTipo" x="112" y="211" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreTipo}"/>
	<s:TextInput id="_nombreMarca" x="272" y="211" width="150" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._nombreMarca}"/>
	<s:Label x="669" y="200" color="#767474" fontSize="10" fontStyle="italic" text="año de fab."/>
	<s:TextInput id="_anioFabricacion" x="668" y="212" width="70" contentBackgroundColor="#e7e7e7"
				 enabled="false" fontStyle="italic" text="{_equipo._anioFabricacion}"/>
	<s:TextInput id="_nombreAreaSoporte" x="429" y="21" width="151" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:TextInput id="_nombreTipoServicio" x="588" y="21" width="150" contentBackgroundColor="#E7E7E7"
				 enabled="false" fontWeight="bold" textAlign="center"/>
	<s:DataGrid id="_dataList" x="761" y="21" width="550" height="361"
				contentBackgroundColor="#D5FBDB" dataProvider="{_prediagnosticos}"
				enabled="{_dataReady&amp;&amp;!_newData}" requestedRowCount="4"
				selectionChange="onDataPreDiagnosticSelect();">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="falla" headerText="Pre-Diagnóstico"
							  itemRenderer="renderers.Seguimiento_ItemRenderer2"></s:GridColumn>
			</s:ArrayList>
		</s:columns>	
		
	</s:DataGrid>
	<s:Label x="4" y="322" text="Tiempo Estimado :"/>
	<s:ComboBox id="_servicioUnidadTiempo" x="163" y="316" width="93" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{ConstantData.TiempoEstimado}"
				enabled="false" fontStyle="italic"
				selectedIndex="{_datosPrediagnostico._servicioUnidadTiempo}"> </s:ComboBox>
	<s:TextInput id="_servicioNumeroTiempo" x="112" y="316" width="44" change="dataChange();"
				 contentBackgroundColor="#D5FBDB" enabled="false" fontStyle="normal"
				 text="{_datosPrediagnostico._servicioNumeroTiempo}" textAlign="center"/>
	<s:Label x="19" y="522" text="Cantidad Inicial :"/>
	<s:TextInput id="_tipoCambio" x="113" y="359" width="43" change="dataOrderChange();"
				 chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB" enabled="true"
				 fontStyle="normal"/>
	<s:TextInput id="_fechaPreCotizacion" x="269" y="359" width="89" change="dataOrderChange();"
				 chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB" enabled="true"
				 fontStyle="normal"/>
	<s:Label x="15" y="365" text="Tipo de Cambio :"/>
	<s:Label x="165" y="366" text="Fecha Cotización :"/>
	<s:Label x="3" y="406" text="Responsable Cot. :"/>
	<s:ComboBox id="_responsablePreCotizacion" x="113" y="400" width="389" change="updateResponsible();"
				contentBackgroundColor="#D5FBDB" dataProvider="{SystemGlobals.EMPLEADOS}"
				enabled="true" labelFunction="concatenateName"></s:ComboBox>
	<s:Label x="64" y="443" text="Puesto :"/>
	<s:ComboBox id="_idPuesto" x="113" y="438" width="310" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{SystemGlobals.PUESTOS}"
				enabled="false" labelField="_nombre"></s:ComboBox>
	<s:Label x="24" y="483" text="Departamento :"/>
	<s:ComboBox id="_idDepartamento" x="113" y="477" width="310" change="dataChange();"
				contentBackgroundColor="#D5FBDB" dataProvider="{SystemGlobals.DEPARTAMENTOS}"
				enabled="false" labelField="_nombre"></s:ComboBox>
	<s:Button x="367" y="358" width="56" height="23" label="Hoy" click="getCurrentTime();"
			  enabled="{!_newData}"/>
	<s:TextInput id="_cantidadInicial" x="113" y="516" width="131" change="dataOrderChange();"
				 chromeColor="#CCCCCC" contentBackgroundColor="#D5FBDB" enabled="true"
				 fontStyle="normal"/>
	<s:Button label="Actualizar" width="80" enabled="{_updateOrdenData&amp;&amp;!_newOrdenData}" visible="true" click="updateOrdenData();" y="598" x="113"/>
	<s:Button label="Cancelar" width="80" enabled="{_newOrdenData||_updateOrdenData}" visible="true" click="cancelOrder();" y="598" x="201"/>
	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.random.constants.Catalogs;
			import mx.random.constants.Languages;
			import mx.random.constants.SystemGlobals;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.dataManagers.EventManager;
			import mx.random.forms.Validator;
			import mx.random.web.WebApplication;
			import mx.random.windowManagers.PopManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.random.constants.ConstantData;
			import mx.utils.StringUtil;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
			[Bindable]	private var _Data:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataDiagnostico:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;
			
			[Bindable]	public var _dataOrdenReady:Boolean 		= false;
			[Bindable]	public var _newOrdenData:Boolean 		= false;
			[Bindable]	public var _updateOrdenData:Boolean 	= false;
			
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number 			= 0;
			private var _selectedName:String 		= "";
			private var _idOrdenSelected:Number		= -1;
			private var _serviceName  				= "Ordenes";
			private var _mainId  					= "_idDiagnostico";
			private var _mainFocusField:String      = "_operador";
			[Bindable] private var _cliente:Object = {};
			[Bindable] private var _equipo:Object = {};
			[Bindable] private var _cotizacion:Object = {};
			[Bindable] private var _datosPrediagnostico:Object = {};
			[Bindable] private var _prediagnosticos:ArrayCollection = new ArrayCollection();
			
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				initView();	
			}
			
			public function set idOrden(value:Number):void{
				_idOrdenSelected = value;
			}
			
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				
				//----------- Validaciones ---------------------------
				//Valid.addStringVal(_nombre,2,100,"Nombre");
				//Valid.addStringVal(_codigo,1,2,"Código");
				
				//----------- Validaciones ---------------------------
				
				
				Valid.validateOnChange = true;
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}
			
			private function extraCreateData(params:Object):Object{				
				//params["_newsImage"] = _image;
				return params;
			}
			
			private function createRecordExtras():void{
				//_image = "defaultNew.jpg";
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_color'] = areaColor.selectedColor;			
				return params;
			}
			
			private function loadExtraFields(params:Object):void{				
				//_image = params["_newsImage"];
			}
			
			private function forceImports():void{
				
			}
			
			private function concatenateName(value:Object):String
			{
				var nombre:String = "";
				if(value._nombre != null && value._nombre != undefined){
					nombre += StringUtil.trim(value._nombre) + " ";
				}
				if(value._paterno != null && value._paterno != undefined){
					nombre += StringUtil.trim(value._paterno) + " ";
				}
				if(value._materno != null && value._materno != undefined){
					nombre += StringUtil.trim(value._materno) + " ";
				}
				return nombre;
			}
			
			public function initView():void{
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = ["_creado","_modificado","_creadoPor","_creado",	"_modificado","_creadoPor",
					"_modificadoPor","_descripcionClienteFalla","_idCodigoError","_idCliente","_idContacto",
					"_idTipoServicio","_idAreaSoporteTecnico","_idEstatus","_idEmpleado","_idCliente","_idContacto",
					"_idEquipo","_fechaHabloCon","_idEquipo","_idRefaccion","_diasReparacion",
					"_importe","_totalRemisionar","_noRemision","_responsableAsignacionDeFecha",
					"_domicilioServicio","_fechaServicioInicial","_formaPago","_fechaPagoInicial",
					"_tecnicoAsignado","_seInformoVisitaA","_fechaPromesaVisita","_tiempoUnidadDiagnostico","_tiempoNumeroDiagnostico",
					"_diasReparacion","_horaServInicial","_nombreTecnicoAsignado","_totalFacturar","_noFactura","_fechaServInicial","_nota",
					"_fechaCotizacion","_responsableCotizacion",
					"_prediagnosticoNumeroTiempo","_prediagnosticoUnidadTiempo","_idTecnico","_idTecnicoDiagnostico",
					"_fechaCotizacion","_responsableCotizacion",
					"_tipoTransporte","_costoManoObra","_costoRefaccion","_costoTransporte","_costoHotel","_costoComidas","_costoFleteSobreEquipaje",
					"_costoGastosDiversos","_observacionesCotDiag","_cantidadComplemento","_importePagoInicial","_fechaPrePagoInicial",
					"_preImporte",
					"_tieneServicio","_tienePrediagnostico","_tieneCotizacionPrediagnostico","_tieneVentaPrediagnostico","_tieneConfirmacion",
					"_tieneDiagnostico","_tieneCotizacionDiagnostico","_tieneVentaDiagnostico",
					"_fechaDepositoVta","_importeDepositoVta","_formaPagoVta","_observacionesComplVta","_observacionesFacVta"
				];
				_DataDiagnostico.exceptions = ["_idDiagnostico","_descripcionFalla","_descripcionSolucion","_esPrediagnostico",
												"_fechaCreacion","_tiempoNumero","_tiempoUnidad","_porcentajeDificultad","_falla","_descripcionFallaReal","_descripcionAccion","_nombreRefaccion"
												];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				
				//_searchType.selectedIndex = 1;
			}
			
			public function imageUploadReady(data:Object):void{
				
			}
			
			// ------------------- View Extra Data -------------------------------
			
			
			private function initData():void{
				_MainService.getFields();
				_MainService.getDiagnosticFields();
				_MainService.getDiagnosticFields.addEventListener(ResultEvent.RESULT,onGetDiagnosticFieldsResult);
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;
				Valid.validateAll();
				this[_mainFocusField].setFocus();
				createRecordExtras();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function updateData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraUpdateData(_DataDiagnostico.makeData());
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.updateDiagnosticRecord(params);
					_MainService.updateDiagnosticRecord.addEventListener(ResultEvent.RESULT,onUpdateDiagnosticComplete);
					_dataIndex =_dataList.selectedIndex;
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function updateOrdenData():void{
				if(Valid.validateAll()){
					_dataOrdenReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					params["_idOrden"] = _idOrdenSelected
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.deleteRecord(params);
					_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();
				Valid.validateAll();
			}
			
			private function cancelOrder():void{
				getOrderData();
				resetOrderBooleans();
				Valid.validateAll();
			}
			
			private function getData():void{
				_MainService.getClientFromOrder(_idOrdenSelected);
				_MainService.getEquipmentFromOrder(_idOrdenSelected);
				_MainService.getPreDiagnosticRecordsFromOrder(_idOrdenSelected);
				_MainService.getPrediagnosticData(_idOrdenSelected);
				_MainService.getClientFromOrder.addEventListener(ResultEvent.RESULT,onGetDataClientResult);
				_MainService.getEquipmentFromOrder.addEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				_MainService.getPreDiagnosticRecordsFromOrder.addEventListener(ResultEvent.RESULT,onGetPreDiagnosticResult);
				_MainService.getPrediagnosticData.addEventListener(ResultEvent.RESULT,onGetPreDiagnosticDataResult);
				getOrderData();
				resetBooleans();
			}
			
			private function getOrderData():void{
				_MainService.getSpecificOrder(_idOrdenSelected);
				_MainService.getSpecificOrder.addEventListener(ResultEvent.RESULT,onGetOrderResult);
				resetOrderBooleans();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			private function resetOrderBooleans():void{
				_newOrdenData = false;
				_updateOrdenData = false;
			}
			
			private function dataChange():void{
				_updateData = true;
			}
			
			private function dataOrderChange():void{
				_updateOrdenData = true;
			}
			
			private function updateResponsible():void{
				if(_responsablePreCotizacion.selectedIndex > 0){
					var userSelected = _responsablePreCotizacion.selectedItem;
					_idPuesto.selectedIndex = userSelected._idPuesto;
					_idDepartamento.selectedIndex = userSelected._idDepartamento;
					if(_responsablePreCotizacion.selectedIndex != _DataResult[0]._responsablePreCotizacion){
						dataOrderChange();
					}
				}
			}
			private function getCurrentTime():void{
				var currentDateTime:Date = new Date();
				_fechaPreCotizacion.text = currentDateTime.fullYear + "-" + currentDateTime.month + "-" + currentDateTime.date;
				dataOrderChange();
			}
			
			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
			}
			
			private function onGetDiagnosticFieldsResult(e:ResultEvent):void{
				_MainService.getDiagnosticFields.removeEventListener(ResultEvent.RESULT,onGetDiagnosticFieldsResult);
				if(e){
					if(e.result) {
						_DataDiagnostico.createFields(Converter.arrayConverter(e.result));
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
			}
			
			private function onGetDataClientResult(e:ResultEvent):void{
				_MainService.getClientFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataClientResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					resArr[0]._nombreEstado = ConstantData.NationalStates[Number(resArr[0]._estado)].label;
					_cliente = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_cliente = {};
				}
			}
			
			private function onGetPreDiagnosticResult(e:ResultEvent):void{
				_MainService.getPreDiagnosticRecordsFromOrder.removeEventListener(ResultEvent.RESULT,onGetPreDiagnosticResult);
				_prediagnosticos = Converter.arrayConverter(e.result);
				_dataList.selectedIndex = _dataIndex;
				_dataList.setSelectedIndex(_dataList.selectedIndex);
				onDataPreDiagnosticSelect();
				_dataReady = true;
			}
			
			private function onGetPreDiagnosticDataResult(e:ResultEvent):void{
				_MainService.getPreDiagnosticData.removeEventListener(ResultEvent.RESULT,onGetPreDiagnosticDataResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					_datosPrediagnostico = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_datosPrediagnostico = {};
				}
			}
			
			private function onGetOrderResult(e:ResultEvent):void{
				_MainService.getSpecificOrder.removeEventListener(ResultEvent.RESULT,onGetOrderResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No existe orden con el id especificado","Atención")
				}else{
					_Data.loadData(_DataResult[0]); //Sólo debe de haber un registro o ninguno
					updateResponsible();//Visualizar el puesto y departamento al que pertenezca el responsable
				}
				_dataOrdenReady = true;				
			}

			private function onGetDataSystemResult(e:ResultEvent):void{
				_MainService.getSystemFromOrder.removeEventListener(ResultEvent.RESULT,onGetDataSystemResult);
				var resArr:ArrayCollection;
				resArr = Converter.arrayConverter(e.result);
				if(resArr.length > 0){
					_equipo = resArr[0]; //Sólo debe de haber un registro o ninguno
				}else{
					_equipo = {};
				}
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay registros en la base de datos","Atención")
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);
					_dataList.selectedIndex = _dataIndex;
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
				}
				_dataReady = true;
				resetBooleans();
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}
			
			private function onDataPreDiagnosticSelect():void{
				if(_dataList.selectedIndex == -1) return;
				_DataDiagnostico.loadData(_dataList.selectedItem);
			}
			
			private function onDataSelect():void{
				if(_dataList.selectedIndex!=-1) {
					_DataDiagnostico.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem[_mainId];
				}
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				Catalogs.reload();
				getData();
			}
			
			private function onUpdateDiagnosticComplete(e:ResultEvent):void{
				_MainService.updateDiagnosticRecord.removeEventListener(ResultEvent.RESULT,onUpdateDiagnosticComplete);
				//Catalogs.reload(); No es necesario recargar todosss los catalogos
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				//Catalogs.reload(); No es necesario recargar todosss los catalogos
				getOrderData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				Catalogs.reload();
				getData();
			}
			
			//-------------------------------- ResultsEvents --------------------------------------	
			
			//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean = true):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{
				PopUpManager.removePopUp(e.target as TitleWindow);
			}
			//-------------------------------- POP UP WINDOW --------------------------------------
			
			//-------------------------------- Search Engine --------------------------------------
			/*
			private function searchFilter():void{
			_DataResult.filterFunction = vlidateSearch;
			_DataResult.refresh();
			}
			
			private function vlidateSearch(item:Object):Boolean{
			var isMatch:Boolean = false;           
			if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
			isMatch = true
			}              
			return isMatch;              
			}
			
			private function search():void{
			_searchFilter = _searchField.text;
			searchFilter();
			}
			private var _searchFilter:String 			= new String();
			[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Id",     	value:"_idArea"},{label:"Nombre",     	value:"_nombre"}]);
			*/
			//-------------------------------- Search Engine --------------------------------------					
			
		]]>
	</fx:Script>
	
	
	
	
	
</s:TitleWindow>
