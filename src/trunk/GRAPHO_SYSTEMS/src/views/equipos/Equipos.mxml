<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:components="views.components.*"
			   width="584" height="478" horizontalCenter="0"
			   title="Equipos">

	<s:TextInput x="118" y="10" id="_nombreEquipo" change="dataChange();" width="151" tabIndex="1"/>
	<s:TextInput x="399" y="9" id="_modelo" change="dataChange();" width="175" tabIndex="2"/>
	<s:TextInput x="118" y="40" id="_serie" change="dataChange();" width="150" tabIndex="3"/>
	<s:TextInput x="399" y="39" id="_anioFabricacion" change="dataChange();" width="175" maxChars="4" restrict="0-9"  tabIndex="4"/>

	<s:ComboBox 	x="119" id="_idMarca" 	labelField="_nombreMarca" dataProvider="{SystemGlobals.MARCAS}" change="dataChange();"	width="148" y="70" tabIndex="5"/>
	<s:ComboBox 	x="403" id="_idTipoEquipo" labelField="_nombreTipo" dataProvider="{SystemGlobals.TIPOS_EQUIPOS}" change="dataChange();"	width="133" y="69" tabIndex="6"/>
	<s:ComboBox 	x="120" id="_searchType" 	dataProvider="{_searchTypes}" 	width="148" y="113" tabIndex="7"/>
	<s:TextInput 	x="276" id="_searchField" 	change="search();" 		width="298" enabled="{!_newData}" y="113" tabIndex="8"/>
	
	
	<s:Label y="14" right="193" width="101" text="Modelo:" textAlign="right"/>
	<s:Label y="47" right="473" width="101" text="No. Serie:" textAlign="right"/>


	<s:DataGrid id="_dataList" left="10" right="10" bottom="50" height="233"
				dataProvider="{_DataResult}"
				enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;!_updateData}"
				selectionChange="onDataSelect();" selectionMode="singleRow">
		<s:columns>	
			<s:ArrayList>
				<s:GridColumn headerText="Nombre" dataField="_nombreEquipo" ></s:GridColumn>		
				<s:GridColumn headerText="Modelo" dataField="_modelo"></s:GridColumn>
				<s:GridColumn headerText="N.Serie" dataField="_serie" ></s:GridColumn>		
				<s:GridColumn headerText="Año" dataField="_anioFabricacion"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Button visible="{!_newData&amp;&amp;!_updateData}" left="10" bottom="10" width="80"
			  height="30" label="{SystemGlobals.LABELS[5][SystemGlobals.LANGUAGE]}"
			  click="newData();" enabled="{_dataReady}"/>
	<s:Button visible="{_newData||_updateData}" left="98" bottom="10" width="80" height="30"
			  label="{SystemGlobals.LABELS[7][SystemGlobals.LANGUAGE]}" click="cancel();"
			  enabled="{_dataReady}"/>
	<s:Button visible="{_newData}" left="10" bottom="10" width="80" height="30"
			  label="{SystemGlobals.LABELS[10][SystemGlobals.LANGUAGE]}" click="createData();"
			  enabled="{_dataReady}"/>
	<s:Button visible="{!_newData&amp;&amp;!_updateData}" left="98" bottom="10" width="80"
			  height="30" label="{SystemGlobals.LABELS[6][SystemGlobals.LANGUAGE]}"
			  click="deleteDataAlert();" enabled="{_dataReady&amp;&amp;!_newData}"/>
	<s:Button visible="{_updateData&amp;&amp;!_newData}" left="10" bottom="10" width="80" height="30"
			  label="{SystemGlobals.LABELS[8][SystemGlobals.LANGUAGE]}" click="updateData();"
			  enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}"/>
	<s:Button right="10" bottom="10" width="145" height="30"
			  label="{SystemGlobals.LABELS[9][SystemGlobals.LANGUAGE]}" click="closeWindow();"
			  enabled="{!_newData}"/>
	<s:Button x="275" y="69" width="30" height="23"
			  click="openPopUp(&quot;equipos.Marcas&quot;,true);"
			  icon="@Embed(source='../../assets/Icons/Buttons/Edit.png')"
			  skinClass="spark.skins.spark.ButtonSkin"/>
	<s:Button x="544" y="68" width="30" height="23"
			  click="openPopUp(&quot;equipos.Tipos_Equipos&quot;,true);"
			  icon="@Embed(source='../../assets/Icons/Buttons/Edit.png')"
			  skinClass="spark.skins.spark.ButtonSkin"/>
	
	
	<s:Label y="76" right="191" width="101" text="Tipo Equipo:" textAlign="right"/>
	
	<s:Label y="119" right="468" width="105"
			 text="{SystemGlobals.LABELS[4][SystemGlobals.LANGUAGE]} :" textAlign="right"/>
	<s:Label x="10" y="12" width="100" height="16" fontStyle="normal"
			 text="Descripción:" textAlign="right"
			 verticalAlign="middle"/>
	<s:Label y="47" right="192" width="101" text="Año:" textAlign="right"/>
	<s:Label y="76" right="473" width="101" text="Marca:" textAlign="right"/>
	
	
	

	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.random.constants.Catalogs;
			import mx.random.constants.Languages;
			import mx.random.constants.SystemGlobals;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.dataManagers.EventManager;
			import mx.random.forms.Validator;
			import mx.random.web.WebApplication;
			import mx.random.windowManagers.PopManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
			[Bindable]	private var _Data:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;
			
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number 		= 0;
			private var _selectedName:String 	= "";
			private var _serviceName  			= "Equipos";
			private var _mainId  				= "_idEquipo";
			private var _mainFocusField:String 	= "_nombreEquipo";
			
			
			[Bindable]	private var _idCliente:Number 		= -1;
			[Bindable]	private var _nombreEmpresa:String 	= "";
			private var _dataObject:Object  	= new Object();
			
			public function set Cliente(value:Object):void	{
				_nombreEmpresa = value._nombreEmpresa;	
				_dataObject = value;	
				_idCliente = 	value._idCliente;
			}
			
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				initView();
			}
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this, idClient:Number
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				
				//----------- Validaciones ---------------------------
				Valid.addStringVal(_nombreEquipo,1,100,"Descripcion del Equipo");

				
				//----------- Validaciones ---------------------------
				
				
				Valid.validateOnChange = true;
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}
			
			private function onFocusOut(e:Event):void{
				if(_newData||_updateData) Valid.validateAll();//Valid.validateOne(e.currentTarget.name);
			}
			
			private function extraCreateData(params:Object):Object{	
				if(_idCliente!=-1){
					params["_idCliente"] = _idCliente;
				}
				
				//params["_newsImage"] = _image;
				return params;
			}
			
			private function createRecordExtras():void{
				//_image = "defaultNew.jpg";
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_color'] = areaColor.selectedColor;			
				return params;
			}
			
			private function loadExtraFields(params:Object):void{				
				//_image = params["_newsImage"];
			}
			
			private function forceImports():void{
				
			}
			
			public function initView():void{
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = ["_idEquipo", "_idCliente"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				
				_searchType.selectedIndex = 1;
			}
			
			public function imageUploadReady(data:Object):void{
				
			}
			
			// ------------------- View Extra Data -------------------------------
			
			
			private function initData():void{
				_MainService.getFields();
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;
				Valid.validateAll();
				this[_mainFocusField].setFocus();
				createRecordExtras();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function updateData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
					_dataIndex =_dataList.selectedIndex;
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.deleteRecord(params);
					_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();
				Valid.validateAll();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			private function dataChange():void{
				_updateData = true;
			}
			
			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
				
				
			}
			
			private function getData():void{
					_MainService.getRecordById(_idCliente);
					_MainService.getRecordById.addEventListener(ResultEvent.RESULT,onGetDataResult);
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_MainService.getRecordById.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay registros en la base de datos","Atención")
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);
					_dataList.selectedIndex = _dataIndex;
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
				}
				_dataReady = true;
				resetBooleans();
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}
			
			private function onDataSelect():void{
				if(_dataList.selectedIndex!=-1) {
					_Data.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem[_mainId];
				}
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				Catalogs.reloadSpecificTables(["equipos"]);
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				Catalogs.reloadSpecificTables(["equipos"]);
				getData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				Catalogs.reloadSpecificTables(["equipos"]);
				getData();
			}
			
			//-------------------------------- ResultsEvents --------------------------------------	
			
			//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean = true):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{
				PopUpManager.removePopUp(e.target as TitleWindow);
			}
			//-------------------------------- POP UP WINDOW --------------------------------------
			
			//-------------------------------- Search Engine --------------------------------------
			
			private function searchFilter():void{
				_DataResult.filterFunction = vlidateSearch;
				_DataResult.refresh();
			}
			
			private function vlidateSearch(item:Object):Boolean{
				var isMatch:Boolean = false;           
				if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
					isMatch = true
				}              
				return isMatch;              
			}
			
			private function search():void{
				_searchFilter = _searchField.text;
				searchFilter();
			}
			private var _searchFilter:String 			= new String();
			[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Nombre",     	value:"_nombreEquipo"},{label:"Modelo",     	value:"_modelo"},
																						   {label:"No. Serie",     	value:"_serie"},{label:"Año Fabricacion",     	value:"_anioFabricacion"}]);
			
			//-------------------------------- Search Engine --------------------------------------					
			
		]]>
	</fx:Script>
	
</s:TitleWindow>
