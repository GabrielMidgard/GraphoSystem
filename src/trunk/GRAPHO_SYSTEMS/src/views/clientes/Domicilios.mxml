<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="590" height="530" contentBackgroundColor="#D5FBDB"
			   title="Domicilios">
	
	
	
	<fx:Script>
		<![CDATA[
			import mx.random.userAuth.User;
			import mx.random.constants.SystemGlobals;
			import mx.random.constants.GlobalData;
			import mx.random.constants.Catalogs;
			import mx.random.constants.ConstantData;
			import mx.random.constants.Constantes;
			import mx.random.windowManagers.PopManager;
			import mx.random.constants.Languages;
			import mx.random.forms.Validator;
			import mx.random.dataManagers.EventManager;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.web.WebApplication;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import mx.rpc.remoting.RemoteObject;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
			private var _SaleService:RemoteObject 		= new RemoteObject();
			[Bindable]	private var _Data:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;
			
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number = 0;
			private var _selectedName:String 		= "";
			private var _serviceName  				= "Direcciones";
			private var _mainId  					= "_idDireccion";
			private var _mainFocusField:String      = "_calle";
			private var _currentClient:String = "";
			
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
				initView();
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				
			}
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			public function set dataObject(value:Object):void{
				if(value != null){
					_currentClient = value._idCliente;	
				}
			}
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);			
				Valid.validateOnChange = true;			
				
				Valid.addStringVal(_calle,5,255,"Calle");
				Valid.addStringVal(_noExterior,1,8,"Número Exterior");
				Valid.addStringVal(_ciudad,2,50,"Ciudad");
				Valid.addStringVal(_colonia,2,50,"Colonia");
				Valid.addComboVal(_idEstado,"Estado");
				Valid.addStringVal(_cp,5,5,"Código Postal");				
			}
			
			
			
			private function extraCreateData(params:Object):Object{
				/*params["_newsImage"] = _image;*/
				params["_idPropietario"] = _currentClient;
				return params;							
			}
			
			private function createRecordExtras():void{				
				/*_image = "defaultNew.jpg";*/		
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_fechaNacimiento'] = _year.selectedItem.label+'-'+_month.selectedItem.value+'-'+_day.selectedItem.value;			
				return params;
			}
			
			private function loadExtraFields(params:Object):void{
				/*_image = params["_newsImage"];*/
			}
			
			private function forceImports():void{
				
			}
			
			public function initView():void{
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = ["_idDireccion","_idTipoDireccion","_idPropietario","_idPais","_latitud","_longitud"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				loadScroll();
			}
			
			// ------------------- View Extra Data -------------------------------
			
			private function loadScroll():void{
				_dataList.visible = false;
				for(var n:Number = 0;n<100;n++){
					_DataResult.addItem({i:0});
				}
			}
			
			private function initData():void{
				_MainService.getFields();
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;				
				this[_mainFocusField].setFocus();
				createRecordExtras();
				Valid.validateAll();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function updateData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
					_dataIndex =_dataList.selectedIndex;
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.deleteRecord(params);
					_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();				
				Valid.validateAll();
				Valid.removeAllKnots();				
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			private function dataChange():void{				
				_updateData = true;				
			}
			
			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onFilterChange():void{
				_dataIndex = -1;
				getData();
			}
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
				_dataList.visible = true;
				
			}
			
			public function getData():void{
				
				var parmas:Object = {};
				_MainService.getRecords(_currentClient);
				_MainService.getRecords.addEventListener(ResultEvent.RESULT,onGetDataResult);
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay registros en la base de datos","Atención")
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);
					_dataList.selectedIndex = _dataIndex;
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
					Valid.validateAll();
					Valid.removeAllKnots();
				}
				_dataReady = true;
				resetBooleans();
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}
			
			private function onDataSelect():void{
				if(_dataList.selectedIndex!=-1) {
					_Data.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem[_mainId];
				}
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				getData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				getData();
			}
			
			//-------------------------------- ResultsEvents --------------------------------------	
			
			//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean = false):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{
				PopUpManager.removePopUp(e.target as TitleWindow);
			}
			//-------------------------------- POP UP WINDOW --------------------------------------
			
			//-------------------------------- Search Engine --------------------------------------
			
			private function searchFilter():void{
				_DataResult.filterFunction = vlidateSearch;
				_DataResult.refresh();
			}
			
			private function vlidateSearch(item:Object):Boolean{
				var isMatch:Boolean = false; 
				if(item[_searchType.selectedItem.value]!=null){         
					if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
						isMatch = true
					}   
				}           
				return isMatch;              
			}
			
			private function search():void{
				_searchFilter = _searchField.text;
				searchFilter();
			}
			
			
			private function updateFilter():void{
				//_searchField.text = "";
				//search();
			}	
			
			private var _searchFilter:String 			= new String();
			[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([
				{label:"Calle", value:"_calle"},
				{label:"Ciudad", value:"_ciudad"}
			]);
			
			//-------------------------------- Search Engine --------------------------------------					
			
		]]>
	</fx:Script>
	<s:Label x="87" y="27" text="calle"  fontSize="9" color="#797979" fontStyle="italic"/>
	<s:Label x="87" y="68" text="ciudad"  fontSize="9" color="#797979" fontStyle="italic"/>
	<s:Label x="413" y="68" text="estado"  fontSize="9" color="#797979" fontStyle="italic"/>
	<s:Label x="415" y="27" text="número"  fontSize="9" color="#797979" fontStyle="italic"/>
	<s:Label x="472" y="27" text="interior"  fontSize="9" color="#797979" fontStyle="italic"/>
	<s:Label x="517" y="27" text="c.p."  fontSize="9" color="#797979" fontStyle="italic"/>
	<s:Label x="21.5" y="42" text="Dirección :" />
	<s:TextInput x="87" y="37" id="_calle" change="dataChange();" width="318" maxChars="255" tabIndex="1"/>
	<s:TextInput x="414" y="37" id="_noExterior" change="dataChange();" width="48" maxChars="10" tabIndex="2" restrict="0-9"/>
	<s:TextInput x="470" y="37" id="_noInterior" change="dataChange();" width="40" maxChars="5" tabIndex="3" restrict="0-9 A-Z "/>
	<s:TextInput x="515" y="37" id="_cp" change="dataChange();" width="55" restrict="0-9" maxChars="5" tabIndex="4"/>
	<s:TextInput x="87" y="78" id="_ciudad" change="dataChange();" width="152" tabIndex="5"/>
	<s:Label x="87" y="108" text="entre calles"  fontSize="9" color="#797979" fontStyle="italic"/>
	<s:TextInput x="87" y="118" id="_entreCalles" change="dataChange();" width="319" tabIndex="8"/>
	<s:Label x="12.5" y="151" text="Referencia :" />
	<s:TextArea x="86" y="148" id="_referencia" change="dataChange();" width="484" height="48" tabIndex="9"/>
	
	<s:DataGrid height="188" dataProvider="{_DataResult}" id="_dataList" selectionChange="onDataSelect();" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;!_updateData}" width="484" x="86" y="252">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Calle" dataField="_calle"/>
				<s:GridColumn dataField="_ciudad" headerText="Ciudad"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Button label="Nuevo" width="80" enabled="{_dataReady}" visible="{!_newData&amp;&amp;!_updateData}" click="newData();" x="86" y="448"/>
	<s:Button label="Cancelar" width="80" enabled="{_dataReady}" visible="{_newData||_updateData}" click="cancel();" x="174" y="448"/>
	<s:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="{_newData}" click="createData();" x="86" y="448"/>
	<s:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData}" visible="{!_newData&amp;&amp;!_updateData}" click="deleteDataAlert();" x="174" y="448"/>
	<s:Button label="Actualizar" width="80" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}" visible="{_updateData&amp;&amp;!_newData}" click="updateData();" x="86" y="448"/>
	<s:Button label="Regresar" click="closeWindow();" width="187"  enabled="{!_newData}" x="383" y="448"/>
	
	<s:ComboBox 	x="157" id="_searchType" 	dataProvider="{_searchTypes}" 	width="92" y="217" change="updateFilter();"/>
	<s:TextInput 	x="257" id="_searchField" 	change="search();" 		width="313" enabled="{!_newData}" y="217"/>
	<s:Label x="90" text="Filtrar por :" textAlign="right" y="224"/>
	<s:ComboBox  x="414" y="78" id="_idEstado" change="dataChange();" width="156" dataProvider="{ConstantData.NationalStates}" labelField="label" tabIndex="7"/>
	
	<s:Label x="247" y="68" text="colonia"  fontSize="9" color="#797979" fontStyle="italic"/>
	<s:TextInput x="246" y="78" id="_colonia" change="dataChange();" width="159" tabIndex="6"/>
	
</s:TitleWindow>
