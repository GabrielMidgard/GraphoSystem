<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="518" height="454" 
	layout="absolute" 
	horizontalCenter="0" 
	title="Cuentas Bancarias" 
	verticalCenter="0"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	showCloseButton="true">

	<mx:Script>
		<![CDATA[
			import mx.random.constants.ConstantData;
			import mx.random.events.SelectionEvent;
			import mx.random.events.StaticEvent;
			
			import mx.random.constants.Catalogs;
			import mx.random.windowManagers.PopManager;
			import mx.random.constants.Languages;
			import mx.random.forms.Validator;
			import mx.random.dataManagers.EventManager;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.web.WebApplication;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import mx.rpc.remoting.RemoteObject;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
[Bindable]	private var _Data:DataManager 				= new DataManager(this);
[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------

[Bindable]	public var _dataReady:Boolean 			= false;
[Bindable]	public var _newData:Boolean 			= false;
[Bindable]	public var _updateData:Boolean 			= false;
[Bindable]	private var _selectionMode:Boolean		= false;
[Bindable]	private var _multipleSelection:Boolean	= false;
[Bindable]	private var _isCC:Boolean	= true;
[Bindable]	private var _years:ArrayCollection = new ArrayCollection([{label:"Año",value:0},
																		{label:"2011",value:2011},
																		{label:"2012",value:2012},
																		{label:"2013",value:2013},
																		{label:"2014",value:2014},
																		{label:"2015",value:2015},
																		{label:"2016",value:2016},
																		{label:"2017",value:2017},
																		{label:"2018",value:2018},
																		{label:"2019",value:2019},
																		{label:"2020",value:2020}]);

			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number 			= 0;
			private var _selectedName:String 		= "";
			private var _serviceName  				= "Clientes_Cuentas_Bancarias";
			private var _mainId  					= "_idCuenta";
			private var _mainFocusField:String      = "_nombreBanco";
[Bindable]	private var _nombreCliente:String 	    = ""; 			
			private var _idCliente:String;
			private var _numeroCliente:String;
			
			public function set relationIdValue(value:String):void{
				_idCliente = value;
			}
			public function set nombreCliente(value:String):void	{
				_nombreCliente = value;
			}
			
			public function set numeroCliente(value:String):void	{
				_numeroCliente = value;
			}
			
			//-----------Local Vars -----------
			
//---------------------------- Context ---------------------------------------------            

   			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
				initView();
			}

			public function set workManager(value:Object):void{
				_workManager = value;
			}

			public function set selectionMode(value:Boolean):void{
				_selectionMode = value;
			}
			
			public function set multipleSelection(value:Boolean):void{
				_multipleSelection = value;
			}

			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				
			}
			public function get webApplication():WebApplication{ return _webApplication; } 
						
//---------------------------- Context ---------------------------------------------  

//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
						workManager: this
						}					
			}

			private function addValidations():void{
				
				
				
				
				Valid.changeLanguage(Languages.SPANISH);
				Valid.addStringVal(_nombreBanco,3,50,"Nombre del Banco");
				Valid.addStringVal(_numeroCuenta,3,50,"Número de Cuenta");
				Valid.addStringVal(_nombreTitular,3,50,"Nombre del Titular");
				

				var validFields:ArrayCollection = Valid.validFields;
				for(var n:Number = 0;n<validFields.length;n++){					
					this[validFields[n].obj.name].addEventListener(Event.CHANGE,onFocusOut);
				}
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}

			private function onFocusOut(e:Event):void{
				if(_newData||_updateData) Valid.validateAll();//Valid.validateOne(e.currentTarget.name);
			}
			
			private function extraCreateData(params:Object):Object{
				params["_idCliente"] 		= _idCliente;
				params["_numeroCliente"]    = _numeroCliente;
				params["_numeroTarjeta"] 	= "";//_numeroTarjeta.text.slice((_numeroTarjeta.text.length-4),_numeroTarjeta.text.length);
				params["_vencimiento"]		= "";//_idMonth.selectedItem.value+"-"+_idYear.selectedItem.value; 		
				params["_idTipoCuenta"]		= 1;		
				return params;
			}
			
			private function createRecordExtras():void{				
				//_idMonth.selectedIndex 	= 0;
				//_idYear.selectedIndex 	= 0;
			}
			
			private function extraUpdateData(params:Object):Object{	
				params["_idCliente"] 	  = _idCliente;	
				params["_numeroCliente"]  = _numeroCliente;
				return params;
			}
			
			private function loadExtraFields(params:Object):void{
				/*var tempDate:String = params["_vencimiento"];
				if(tempDate){
					var temp:Array 		 = tempDate.split('-');
					_idYear.selectedIndex  	= Converter.findIndex(_years,"label",temp[1]);
					_idMonth.selectedIndex 	= parseInt(temp[0]);					
				}else{
					_idMonth.selectedIndex 	= 0;
					_idYear.selectedIndex 	= 0;
				}
				_numeroTarjeta.text 	= "•••• - •••• - •••• - "+params['_numeroTarjeta'];
				if(Number(params['_idTipoCuenta']) == 3) {_isCC = true;}else{_isCC = false;}*/
				_isCC = false;
			}
			
			private function forceImports():void{
				Catalogs;
			}
			
			public function initView():void{
				forceImports();
				_MainService = _webApplication.getService(_serviceName);
				_Data.exceptions = ["_idCuenta","_idCliente","_numeroCliente","_numeroTarjeta","_vencimiento","_idTipoCuenta","_nombreTitularTarjeta","_idTipoTarjeta"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				loadScroll();				
			}
			
			public function imageUploadReady(data:Object):void{
				
			}

			// ------------------- View Extra Data -------------------------------

			private function loadScroll():void{
				_dataList.visible = false;
				for(var n:Number = 0;n<100;n++){
					_DataResult.addItem({i:0});
				}
			}

			private function initData():void{
				_MainService.getFields();
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
					if(_selectionMode&&_dataList.selectedIndex!=-1) StaticEvent.dispatchEvent(new SelectionEvent(SelectionEvent.SELECTION_COMPLETE,_dataList.selectedItems));
            		dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
            		PopUpManager.removePopUp(this);
            }
            
//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;				
				this[_mainFocusField].setFocus();
				createRecordExtras();
				Valid.validateAll();
			}
			
			private function createData():void{
				if(Valid.validateAll()){					
					if(validCC()){
						_dataReady = false;
						var params:Object = extraCreateData(_Data.makeData());
						_MainService.createRecord(params);
						_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
					}else{
						Alert.show("Los datos de la Tarjeta de Crédito son incorrectos","Error");
					}
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function validCC(){
				var valid:Boolean = true;
				/*if(_idTipoCuenta.selectedIndex==3){
					if(_numeroTarjeta.text == ""||_numeroTarjeta.text.length<16) valid = false;
					if(_idMonth.selectedIndex == 0) valid = false;
					if(_idYear.selectedIndex == 0) valid = false;
					if(_nombreTitularTarjeta.text == ""||_nombreTitularTarjeta.text.length<3)  valid = false;;
				}
				return valid;*/
				return true;
			}

			private function updateData():void{
				if(Valid.validateAll()){
					if(validCC()){
						_dataReady = false;
						var params:Object = extraUpdateData(_Data.makeData());
						params[_mainId] = _dataList.selectedItem[_mainId];
						_MainService.updateRecord(params);
						_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
						_dataIndex =_dataList.selectedIndex;
					}else{
						Alert.show("Los datos de la Tarjeta de Crédito son incorrectos","Error");
					}	
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atención",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.deleteRecord(params);
					_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();
				Valid.validateAll();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}

			private function dataChange():void{
				_updateData = true;
			}
			
			private function selectCC():void{
				/*if(_idTipoCuenta.selectedIndex ==3){
					_isCC = true;					
				}else{
					_isCC = false;
				} 
				_numeroTarjeta.text = "";
				_idMonth.selectedIndex = 0;
				_idYear.selectedIndex = 0;
				_nombreTitularTarjeta.text = "";*/
			}

			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
				_dataList.visible = true;
				
			}
			
			private function getData():void{
				_MainService.getRecords(_idCliente);
				_MainService.getRecords.addEventListener(ResultEvent.RESULT,onGetDataResult);
				
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_isCC = false;
				_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay datos para este registro...\nCrear un registro nuevo?","Atención",Alert.OK|Alert.NO,this,alertNewHandler);
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);
					_dataList.selectedIndex = _dataIndex;
					_dataList.scrollToIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
				}
				_dataReady = true;
				resetBooleans();
			}
						
			
			private function alertNewHandler(e:CloseEvent):void{
				if(e.detail == Alert.OK){
					newData()
				}
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}

			private function onDataSelect():void{
				if(_dataList.selectedIndex!=-1) {
					_Data.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem[_mainId];
				}
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				if(!_selectionMode)
					_workManager.getData();
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				getData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				getData();
			}
			
//-------------------------------- ResultsEvents --------------------------------------	

//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean=false):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{			
	            		PopUpManager.removePopUp(e.target as TitleWindow);
			}
//-------------------------------- POP UP WINDOW --------------------------------------

//-------------------------------- Search Engine --------------------------------------
			
			
			private function tipoDeMoneda(item:Object,dg:DataGridColumn):String{
				var res:String = "";
				if(item[dg.dataField]){
					res = Catalogs.DataObject['bancos_tipos_moneda'][item[dg.dataField]]._codigo;
				}
				return res;
			}			


			private function searchFilter():void{
               			_DataResult.filterFunction = vlidateSearch;
               			_DataResult.refresh();
           		}
          
	       		private function vlidateSearch(item:Object):Boolean{
	           		var isMatch:Boolean = false;           
	           		if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
	               			isMatch = true
	           		}              
	           		return isMatch;              
	       		}
	       	
	       		private function search():void{
				_searchFilter = _searchField.text;
				searchFilter();
			}
			private var _searchFilter:String 			= new String();
[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Cuenta :",     	value:"_idCuenta"},{label:"Tipo Cuenta :",     	value:"_idTipoCuenta"},{label:"Nombre Banco :",     	value:"_nombreBanco"}]);

//-------------------------------- Search Engine --------------------------------------					
			
		]]>
	</mx:Script>
<mx:Label x="48" y="10" text=" Cliente :" textAlign="right"/>
<mx:TextInput x="113" y="10" change="dataChange();" width="389" text="{_nombreCliente}"/>
<mx:Label x="54" y="49" text=" Banco :" textAlign="right"/>
<mx:TextInput x="113" y="49" id="_nombreBanco" change="dataChange();" width="318"/>

	<mx:DataGrid height="150" dataProvider="{_DataResult}" id="_dataList" change="onDataSelect();" allowMultipleSelection="{_multipleSelection}"  enabled="{_dataReady&amp;&amp;!_newData}" y="234" width="493" x="11">
		<mx:columns>			
			<mx:DataGridColumn headerText="CTA" dataField="_idCuenta" width="40"/>	
			<mx:DataGridColumn headerText="Moneda" dataField="_idTipoMoneda" width="60" labelFunction="tipoDeMoneda"/>		
			<mx:DataGridColumn headerText="Banco" dataField="_nombreBanco" width="210"/>
			<mx:DataGridColumn headerText="Número" dataField="_numeroCuenta" />
		</mx:columns>
	</mx:DataGrid>
	<mx:Button label="Nuevo" width="80" enabled="{_dataReady}" visible="{!_newData&amp;&amp;!_updateData}" click="newData();" y="392" x="11"/>
	<mx:Button label="Cancelar" width="80" enabled="{_dataReady}" visible="{_newData||_updateData}" click="cancel();" y="392" x="99"/>
	<mx:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="{_newData}" click="createData();" y="392" x="11"/>
	<mx:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData}" visible="{!_newData&amp;&amp;!_updateData}" click="deleteDataAlert();" y="392" x="99"/>
	<mx:Button label="Actualizar" width="80" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}" visible="{_updateData&amp;&amp;!_newData}" click="updateData();" y="392" x="11"/>
	<mx:Button label="Regresar" click="closeWindow();" width="145"  enabled="{!_newData}" y="392" x="359"/>

	<mx:ComboBox 	x="114" id="_searchType" 	dataProvider="{_searchTypes}" 	width="160" y="204"/>
	<mx:TextInput 	x="282" id="_searchField" 	change="search();" 		width="222" enabled="{!_newData}" y="204"/>
	<mx:Label x="39" text="Filtrar por :" textAlign="right" y="204"/>
	<mx:ComboBox  x="439" y="49" id="_idTipoMoneda" change="dataChange();" width="63" dataProvider="{Catalogs.DataObject['bancos_tipos_moneda']}" labelField="_codigo"/>
	<mx:Label x="48" y="94" text=" Cuenta :" textAlign="right"/>
	<mx:TextInput x="114" y="94" id="_numeroCuenta" restrict="0-9" maxChars="50" change="dataChange();" width="160"/>
	<mx:Label x="10" y="122" text="Nombre Titular :" textAlign="right"/>
	<mx:TextInput x="114" y="122" id="_nombreTitular" restrict="A-Z  " maxChars="50" change="dataChange();" width="328"/>
	<mx:TextInput x="282" y="94" id="_CLABE" restrict="0-9" maxChars="50" change="dataChange();" width="160"/>
	<mx:Label x="450" y="79" text="swift" textAlign="left" fontSize="9" color="#C1C1C1" fontStyle="italic"/>
	<mx:Label x="282" y="79" text="clabe" textAlign="left" fontSize="9" color="#C1C1C1" fontStyle="italic"/>
	<mx:Label x="114" y="79" text="número" textAlign="left" fontSize="9" color="#C1C1C1" fontStyle="italic"/>
	<mx:TextInput x="450" y="94" id="_SWIFT" change="dataChange();" width="53"/>
	<mx:Label x="30" y="150" text="Descripcion :" textAlign="right"/>
	<mx:TextArea x="114" y="152" id="_descripcion" change="dataChange();" width="390"/>
	<mx:HRule x="6" y="40" width="496" height="1"/>
	
</mx:TitleWindow>
