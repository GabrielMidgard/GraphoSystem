<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	width="656" height="274"  
	horizontalCenter="0" 
	title="Administración de Monedas" 
	>

	
	<s:Label x="10" y="29" text="Moneda :" textAlign="right"/>
	<s:Label x="453" y="10" text="Información de :" textAlign="right"/>
	<s:Label x="463" y="123" text="US Dolar :" textAlign="right"/>
	<s:Label x="487" y="152" text="Euro :" textAlign="right"/>
	<s:Label x="456" y="182" text="CAN Dólar :" textAlign="right"/>
	<s:Label x="76" y="10" text="nombre" textAlign="right" fontSize="9" fontStyle="italic" color="#C1C1C1"/>
	<s:Label x="290" y="10" text="código" textAlign="right" fontSize="9" fontStyle="italic" color="#C1C1C1"/>
	<s:Label x="347" y="10" text="tcFix" textAlign="right" fontSize="9" fontStyle="italic" color="#C1C1C1"/>
	<s:Label x="533" y="104" text="tcFix - Actual" textAlign="right" fontSize="9" fontStyle="italic" color="#C1C1C1"/>
	<s:TextInput x="76" y="27" id="_nombre" maxChars="50" change="dataChange();" width="206"/>
	<s:TextInput x="290" y="27" id="_codigo" restrict="A-Z  Ñ" maxChars="3" change="dataChange();" width="49" textAlign="center"/>
	<s:TextInput x="347" y="27" id="_tcFix" restrict="0-9 , ." maxChars="50" change="dataChange();" width="83"/>

	<s:DataGrid height="150" dataProvider="{_DataResult}" id="_dataList" selectionChange="onDataSelect();" selectionMode="singleRow" enabled="{_dataReady&amp;&amp;!_newData}" y="55" width="420" x="10">
		<s:columns>	
			<s:ArrayList>
				<s:GridColumn headerText="Nombre" dataField="_nombre"></s:GridColumn>
				<s:GridColumn headerText="Código" dataField="_codigo" width="60"></s:GridColumn>
				<s:GridColumn headerText="TcFix" dataField="_tcFix" width="80"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Button label="Nuevo" width="80" enabled="{_dataReady}" visible="{!_newData&amp;&amp;!_updateData}" click="newData();" y="213" x="10"/>
	<s:Button label="Cancelar" width="80" enabled="{_dataReady}" visible="{_newData||_updateData}" click="cancel();" y="213" x="98"/>
	<s:Button label="Aceptar" width="80" enabled="{_dataReady}" visible="{_newData}" click="createData();" y="213" x="10"/>
	<s:Button label="Eliminar" width="80" enabled="{_dataReady&amp;&amp;!_newData}" visible="{!_newData&amp;&amp;!_updateData}" click="deleteDataAlert();" y="213" x="98"/>
	<s:Button label="Actualizar" width="80" enabled="{_dataReady&amp;&amp;!_newData&amp;&amp;_updateData}" visible="{_updateData&amp;&amp;!_newData}" click="updateData();" y="213" x="10"/>
	<s:Button label="Regresar" click="closeWindow();" width="145"  enabled="{!_newData}" y="213" x="285"/>
	<s:Button x="533" y="210" label="Actualizar" width="103" click="getTcFix()"/>
	<s:TextInput x="533" y="121" width="103" id="dllTcFix" editable="false"/>
	<s:TextInput x="533" y="150" width="103" id="eurTcFix" editable="false"/>
	<s:TextInput x="533" y="180" width="103" id="canTcFix" editable="false"/>
	<mx:VRule x="438" y="10" height="223"/>
	<s:Image x="453" y="27" source="assets/Comps/BMLogo.jpg" width="180" height="41"/>
	
	<fx:Script>
		<![CDATA[
			import mx.random.events.SelectionEvent;
			import mx.random.events.StaticEvent;
			
			import mx.random.constants.Catalogs;
			import mx.random.windowManagers.PopManager;
			import mx.random.constants.Languages;
			import mx.random.forms.Validator;
			import mx.random.dataManagers.EventManager;
			import mx.random.converters.Converter;
			import mx.random.dataManagers.DataManager;
			import mx.random.web.WebApplication;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import mx.rpc.remoting.RemoteObject;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var _webApplication:WebApplication;
			private var Valid:Validator 			= new Validator();
			private var _workManager:Object 		= new Object();
			private var _MainService:RemoteObject 		= new RemoteObject();
			[Bindable]	private var _Data:DataManager 				= new DataManager(this);
			[Bindable]	private var _DataResult:ArrayCollection 		= new ArrayCollection();			
			private var _eventManager:EventManager 		= new EventManager(this);
			private var _dataIndex:Number 			= 0;
			
			//-----------Event Manager -----------
			
			[Bindable]	public var _dataReady:Boolean 			= false;
			[Bindable]	public var _newData:Boolean 			= false;
			[Bindable]	public var _updateData:Boolean 			= false;
			[Bindable]	private var _selectionMode:Boolean		= false;
			[Bindable]	private var _multipleSelection:Boolean	= false;
			
			//-----------Event Manager -----------
			
			
			//-----------Local Vars -----------
			
			private var _selectedId:Number = 0;
			private var _selectedName:String 		= "";
			private var _serviceName  				= "BancosTipoMoneda";
			private var _mainId  					= "_idMoneda";
			private var _mainFocusField:String      = "_nombre";
			private var _tcFixService:RemoteObject;
			
			//-----------Local Vars -----------
			
			//---------------------------- Context ---------------------------------------------            
			
			public function set context(contextObj:Object):void{
				for( var p:String in contextObj){
					if(this.hasOwnProperty(p)){
						this[p] = contextObj[p];
					}
				}
			}
			
			public function set workManager(value:Object):void{
				_workManager = value;
			}
			
			public function set selectionMode(value:Boolean):void{
				_selectionMode = value;
			}
			
			public function set multipleSelection(value:Boolean):void{
				_multipleSelection = value;
			}
			
			public function set webApplication(value:WebApplication):void{
				_webApplication = value;
				initView();
			}
			public function get webApplication():WebApplication{ return _webApplication; } 
			
			//---------------------------- Context ---------------------------------------------  
			
			//-------------------------------- MainInit --------------------------------------
			// ------------------- View Extra Data -------------------------------
			
			private function get viewContext():Object{
				return {webApplication: _webApplication,
					workManager: this
				}					
			}
			
			private function addValidations():void{
				Valid.changeLanguage(Languages.SPANISH);
				
				
				var validFields:ArrayCollection = Valid.validFields;
				for(var n:Number = 0;n<validFields.length;n++){					
					this[validFields[n].obj.name].addEventListener(Event.CHANGE,onFocusOut);
				}
				Valid.setErrorKnot(Validator.CIRCLE_KNOT,0xFF0000);
			}
			
			private function onFocusOut(e:Event):void{
				if(_newData||_updateData) Valid.validateAll();//Valid.validateOne(e.currentTarget.name);
			}
			
			private function extraCreateData(params:Object):Object{
				//params["_newsImage"] = _image;
				//params['_fechaNacimiento'] 	= _year.selectedItem.label+'-'+_month.selectedItem.value+'-'+_day.selectedItem.value;
				return params;
			}
			
			private function createRecordExtras():void{
				//_image = "defaultNew.jpg";
				/*_day.selectedIndex 	= 0;
				_month.selectedIndex 	= 0;
				_year.selectedIndex 	= 0;*/
			}
			
			private function extraUpdateData(params:Object):Object{	
				//params['_fechaNacimiento'] = _year.selectedItem.label+'-'+_month.selectedItem.value+'-'+_day.selectedItem.value;			
				return params;
			}
			
			private function loadExtraFields(params:Object):void{
				//_image = params["_newsImage"];
				/*
				if(tempDate){
				var temp:Array 		 = tempDate.split('-');
				_day.selectedIndex 	 = parseInt(temp[2]);
				_month.selectedIndex = parseInt(temp[1]);
				_year.selectedIndex  = ConstantData.FindYearindex(temp[0]);
				}else{
				_day.selectedIndex 		= 0;
				_month.selectedIndex 	= 0;
				_year.selectedIndex 	= 0;
				}*/
			}
			
			private function forceImports():void{
				Catalogs;
			}
			
			public function initView():void{
				forceImports();
				_tcFixService = _webApplication.getService(_serviceName);
				_MainService  = _webApplication.getService(_serviceName);
				_Data.exceptions = ["_idMoneda"];
				_MainService.addEventListener(FaultEvent.FAULT,onFault);
				initData();
				addValidations();
				loadScroll();
				getTcFix();
			}
			
			public function imageUploadReady(data:Object):void{
				
			}
			
			// ------------------- View Extra Data -------------------------------
			
			private function loadScroll():void{
				_dataList.visible = false;
				for(var n:Number = 0;n<100;n++){
					_DataResult.addItem({i:0});
				}
			}
			
			private function initData():void{
				_MainService.getFields();
				_MainService.getFields.addEventListener(ResultEvent.RESULT,onGetFieldsResult);
				_dataReady = false;
			}
			
			public function closeWindow():void{
				if(_selectionMode&&_dataList.selectedIndex!=-1) StaticEvent.dispatchEvent(new SelectionEvent(SelectionEvent.SELECTION_COMPLETE,_dataList.selectedItems));
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				PopUpManager.removePopUp(this);
			}
			
			//-------------------------------- MainInit --------------------------------------
			
			private function newData():void{
				_Data.clear();
				_newData = true;
				_updateData = false;				
				this[_mainFocusField].setFocus();
				createRecordExtras();
				Valid.validateAll();
			}
			
			private function createData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraCreateData(_Data.makeData());
					_MainService.createRecord(params);
					_MainService.createRecord.addEventListener(ResultEvent.RESULT,onCreateComplete);
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function updateData():void{
				if(Valid.validateAll()){
					_dataReady = false;
					var params:Object = extraUpdateData(_Data.makeData());
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.updateRecord(params);
					_MainService.updateRecord.addEventListener(ResultEvent.RESULT,onUpdateComplete);
					_dataIndex =_dataList.selectedIndex;
				}else{
					Alert.show(Valid.errors,"Error");
				}
			}
			
			private function deleteDataAlert():void{
				if(_dataList.selectedIndex!=-1){
					Alert.show("Desea borrar el registro seleccionado?","Atenci�n",Alert.YES|Alert.CANCEL,this,deleteData);
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			
			private function deleteData(e:CloseEvent):void{
				if(e.detail==Alert.YES){
					var params:Object = new Object();
					params[_mainId] = _dataList.selectedItem[_mainId];
					_MainService.deleteRecord(params);
					_MainService.deleteRecord.addEventListener(ResultEvent.RESULT,onDeleteComplete);
					_dataReady = false;
				}
			}
			
			private function cancel():void{
				onDataSelect();
				resetBooleans();
				Valid.validateAll();
			}
			
			private function resetBooleans():void{
				_newData = false;
				_updateData = false;
			}
			
			private function dataChange():void{
				_updateData = true;
			}
			
			private function openImageEditor():void{
				if(_dataList.selectedIndex!=-1){
					//_newsIdNumber 	= new Number(_dataList.selectedItem._blogId);
					openPopUp("managers.ImageManager")
				}else{
					Alert.show("No hay registro selecionado","Error");
				}
			}
			//-------------------------------- ResultsEvents --------------------------------------		
			
			private function onGetFieldsResult(e:ResultEvent):void{
				_MainService.getFields.removeEventListener(ResultEvent.RESULT,onGetFieldsResult);
				if(e){
					if(e.result) {
						_Data.createFields(Converter.arrayConverter(e.result));
						getData();
					}
				}else{
					Alert.show("Error al cargar los datos","Error");
					_dataReady = false;
				}
				_DataResult= new ArrayCollection();
				_dataList.visible = true;
				
			}
			
			private function getData():void{
				_MainService.getRecords();
				_MainService.getRecords.addEventListener(ResultEvent.RESULT,onGetDataResult);
			}
			
			private function onGetDataResult(e:ResultEvent):void{
				_MainService.getRecords.removeEventListener(ResultEvent.RESULT,onGetDataResult);
				_DataResult = Converter.arrayConverter(e.result);
				if(_DataResult.length==0) {
					Alert.show("No hay registros en la base de datos","Atenci�n")
				}else{
					if(_dataIndex<0) _dataIndex = 0;
					_Data.loadData(_DataResult[_dataIndex]);
					_dataList.selectedIndex = _dataIndex;
					//De la función: _dataList.scrollToIndex(_dataList.selectedIndex);
					//La sustituí por: _dataList.setSelectedIndex(_dataList.selectedIndex);
					//En la siguiente línea de comandos.
					_dataList.setSelectedIndex(_dataList.selectedIndex);
					//_dataList.scrollToIndex(_dataList.selectedIndex);
					loadExtraFields(_DataResult[_dataIndex]);
				}
				_dataReady = true;
				resetBooleans();
			}
			
			private function onFault(e:FaultEvent):void{
				Alert.show(e.fault.faultString,"Error");
			}
			
			private function onDataSelect():void{
				if(_dataList.selectedIndex!=-1) {
					_Data.loadData(_dataList.selectedItem);
					_dataIndex =_dataList.selectedIndex;
					loadExtraFields(_dataList.selectedItem);
					_selectedId = _dataList.selectedItem[_mainId];
				}
			}
			
			private function onCreateComplete(e:ResultEvent):void{				
				_MainService.createRecord.removeEventListener(ResultEvent.RESULT,onCreateComplete);
				_dataIndex = _DataResult.length;
				getData();
			}
			
			private function onUpdateComplete(e:ResultEvent):void{
				_MainService.updateRecord.removeEventListener(ResultEvent.RESULT,onUpdateComplete);
				getData();
			}
			
			private function onDeleteComplete(e:ResultEvent):void{
				_MainService.deleteRecord.removeEventListener(ResultEvent.RESULT,onDeleteComplete);
				_dataIndex = _DataResult.length-2;
				getData();
			}
			
			//-------------------------------- ResultsEvents --------------------------------------	
			
			//-------------------------------- POP UP WINDOW --------------------------------------	
			public function openPopUp(popUpName:String,modal:Boolean=false):void{
				var pop:TitleWindow = PopUpManager.createPopUp(this, getDefinitionByName("views."+popUpName) as Class, modal) as TitleWindow;
				pop.name = popUpName;
				pop.addEventListener(CloseEvent.CLOSE, closePopup);
				if(pop.hasOwnProperty("context")){
					Object(pop).context = viewContext;
				}
				PopUpManager.centerPopUp(pop);
			}
			
			private function closePopup(e:CloseEvent):void{			
				PopUpManager.removePopUp(e.target as TitleWindow);
			}
			//-------------------------------- POP UP WINDOW --------------------------------------
			
			//-------------------------------- Search Engine --------------------------------------
			
			private function searchFilter():void{
				_DataResult.filterFunction = vlidateSearch;
				_DataResult.refresh();
			}
			
			private function vlidateSearch(item:Object):Boolean{
				var isMatch:Boolean = false;           
				/*if(item[_searchType.selectedItem.value].toLowerCase().search(_searchFilter.toLowerCase()) != -1){
				isMatch = true
				} */             
				return isMatch;              
			}
			
			private function search():void{
				//_searchFilter = _searchField.text;
				searchFilter();
			}
			private var _searchFilter:String 			= new String();
			[Bindable]	private var _searchTypes:ArrayCollection 	= new ArrayCollection([{label:"Moneda :",     	value:"_idMoneda"},{label:"Nombre :",     	value:"_nombre"},{label:"Codigo :",     	value:"_codigo"},{label:"Tc Fix :",     	value:"_tcFix"}]);
			
			//-------------------------------- Search Engine --------------------------------------					
			
			
			private function getTcFix():void{
				dllTcFix.text = "...";
				eurTcFix.text = "..."
				canTcFix.text = "..."
				_tcFixService.getTCFixPage();
				_tcFixService.getTCFixPage.addEventListener(ResultEvent.RESULT,onGetTcFixReady);
			}
			
			
			private function onGetTcFixReady(e:ResultEvent):void{
				_tcFixService.getTCFixPage.addEventListener(ResultEvent.RESULT,onGetTcFixReady);
				var mainString:String 	= e.result.toString();
				var euro:Array			= cleanHTML(mainString).split("<div id=EURO_DATO>")						
				var dollar:Array 		= cleanHTML(mainString).split("<div id=FIX_DATO>");
				var canDll:Array		= cleanHTML(mainString).split("<div id=LIBRA_DATO>");
				
				var euro2:Array 		= euro[1].split("</div>");
				var dollar2:Array 		= dollar[1].split("</div>");
				var canDll2:Array 		= canDll[1].split("</div>");
				
				var DLL:String			= dollar2[0];
				var EUR:String			= euro2[0];
				var CAN:String			= canDll2[0];
				
				dllTcFix.text 			= DLL.replace(new RegExp(/(\r\n|[\r\n])/g),"").replace(new RegExp(/ /g),"");
				eurTcFix.text 			= EUR.replace(new RegExp(/(\r\n|[\r\n])/g),"").replace(new RegExp(/ /g),"");
				canTcFix.text 			= CAN.replace(new RegExp(/(\r\n|[\r\n])/g),"").replace(new RegExp(/ /g),"");
			}	
			
			private function cleanHTML(str:String):String{ 
				var pattern:RegExp 		= /"?"/g;
				var str:String 			= str.replace(pattern, "");
				return str;
			}
			
			
		]]>
	</fx:Script>
	
</s:TitleWindow>
