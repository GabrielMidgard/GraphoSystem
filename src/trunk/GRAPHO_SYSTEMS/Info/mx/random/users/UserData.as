package mx.random.users{import mx.random.forms.FormValidator;import mx.random.constants.ConstantData;import mx.collections.ArrayCollection;import mx.formatters.DateFormatter;[Bindable]public class UserData {	public var user_id:Number		 	=0;	public var user_name:String			="";	public var password:String		 	="";	public var first_name:String		="";	public var last_name1:String		="";	public var last_name2:String		="";	public var email:String		 		="";		private var _dateFormat:DateFormatter = new DateFormatter();	private var _VF:FormValidator = new FormValidator();	private var _ref:Object = new Object();	public var errors:ArrayCollection = new ArrayCollection(); 	public var _fieldConfig:ArrayCollection = new ArrayCollection([		{name:"Id",		field:"user_id",		required:false,		input:true, 		restrict:"0-9", 		maxChars:5, 		minChars:1, 		type:"N"},				{name:"Login",		field:"user_name",		required:true,		input:true, 		restrict:"A-Z a-z 0-9 \\\ \\\- \@\.\,", 		maxChars:100, 		minChars:1, 		type:"S"}, 		{name:"Password",		field:"password",		required:true,		input:true, 		restrict:"A-Z a-z 0-9", 		maxChars:100, 		minChars:1, 		type:"S"}, 		{name:"Nombre",		field:"first_name",		required:true,		input:true, 		restrict:"A-Z a-z 0-9 \\\ \\\- \@\.\,", 		maxChars:100, 		minChars:1, 		type:"S"}, 		{name:"Apellido Paterno",		field:"last_name1",		required:true,		input:true, 		restrict:"A-Z a-z 0-9 \\\ \\\- \@\.\,", 		maxChars:100, 		minChars:1, 		type:"S"}, 		{name:"Apellido Materno",		field:"last_name2",		required:false,		input:true, 		restrict:"A-Z a-z 0-9 \\\ \\\- \@\.\,", 		maxChars:100, 		minChars:1, 		type:"S"}, 		{name:"E-Mail",		field:"email",		required:true,		input:true, 		restrict:"a-z 0-9 /_/@/.", 		maxChars:50, 		minChars:1, 		type:"M"} 	]); 	public function UserData(ref:Object) {		_ref = ref;		for(var n:Number = 0; n<_fieldConfig.length;n++){			if(_fieldConfig[n].input && _fieldConfig[n].type!="C" && _fieldConfig[n].type!="RB" && _fieldConfig[n].type!="CB" && _fieldConfig[n].type!="D"){				_ref[_fieldConfig[n].field].restrict = _fieldConfig[n].restrict;				_ref[_fieldConfig[n].field].maxChars = _fieldConfig[n].maxChars;			}		}	}	public function makeData():Object{		var Data:Object = {user_id:   user_id,					 		user_name:			user_name,					 		password:			password,					 		first_name:			first_name,					 		last_name1:			last_name1,					 		last_name2:			last_name2,					 		email:				email		};		return Data;	} 	public function _makeData():Object{		var Data:Object = {user_id:   user_id,					 		user_name:		user_name,					 		password:		password,					 		first_name:		first_name,					 		last_name1:		last_name1,					 		last_name2:		last_name2,					 		email:			email		};		return Data;	} 	public function validate():Object{		var validation:Boolean = false;		for(var n:Number = 0; n<_fieldConfig.length;n++){			if(_fieldConfig[n].input){				switch(_fieldConfig[n].type){					case "S":						this[_fieldConfig[n].field] = _ref[_fieldConfig[n].field].text;						break;					case "C":						this[_fieldConfig[n].field] = _ref[_fieldConfig[n].field].selectedItem.value;						break;					case "N":						this[_fieldConfig[n].field] = parseInt(_ref[_fieldConfig[n].field].text);						break;					case "M":						this[_fieldConfig[n].field] = _ref[_fieldConfig[n].field].text;						break;					case "V":						this[_fieldConfig[n].field] = _ref[_fieldConfig[n].field].value;						break;					case "CB":						this[_fieldConfig[n].field] = _ref[_fieldConfig[n].field].selected;						break;					case "RB":						this[_fieldConfig[n].field] = _ref[_fieldConfig[n].field].selectedValue;						break;					case "D":						//this[_fieldConfig[n].field] = _ref[_fieldConfig[n].field].text;						this[_fieldConfig[n].field] = ConstantData.SystemFormatDate(_ref[_fieldConfig[n].field].selectedDate);						break;					case "VAR":						this[_fieldConfig[n].field] = _ref[_fieldConfig[n].field];						break;					}				}			}			errors = _VF.validate(_fieldConfig,this);			if(errors.length == 0){				validation = true;			}			return validation;		}	}}